// ==/BOT HASSLE

(function() {
    'use strict';

    // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
    const userConfig = {
        userNumber: "5",
        botToken: '8184449811:AAE-nssyxdjAGnCkNCKTMN8rc2xgWEaVOFA',
        chatIds: ['1046461621'],
        keywords: [],
        clearDelay: 3000,
        maxAttempts: 15,
        checkInterval: 1000,
        debug: true,
        podbrosCooldown: 30000,
        afkSettings: {},
        lastSalaryInfo: null,
        paydayNotifications: true,
        trackPlayerId: true,
        idCheckInterval: 10000,
        govMessagesEnabled: true,
        govMessageCooldown: 360000,
        govMessageThreshold: 6,
        govMessageKeywords: ["—Ç—É—Ç", "–∑–¥–µ—Å—å"],
        trackLocationRequests: false,
        locationKeywords: ["–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–º–µ—Å—Ç–æ", "–ø–æ–∑–∏—Ü–∏—è", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"]
    };

    const accountMapping = {
        "1": { nickname: "Zahar-Deni", server: "01" },
        "2": { nickname: "Yarik_Alihan", server: "12" },
        "3": { nickname: "Fors_Guevara", server: "12" },
        "4": { nickname: "Yarik_Alihan", server: "06" },
        "5": { nickname: "Fors_Guevara", server: "06" },
        "6": { nickname: "Dmitriy_Take", server: "04" },
        "7": { nickname: "Grand_Mamonov", server: "04" },
        "8": { nickname: "Andrey_Sudu", server: "04" },
        "9": { nickname: "Nicolas_Lyashov", server: "04" },
        "10": { nickname: "Sergey_Ast", server: "04" },
        "11": { nickname: "Artur_Vart", server: "04" }
    };

    const config = {
        ...userConfig,
        lastUpdateId: 0,
        activeUsers: {},
        lastPodbrosTime: 0,
        podbrosCounter: 0,
        initialized: false,
        accountInfo: accountMapping[userConfig.userNumber] || { nickname: `User_${userConfig.userNumber}`, server: "–ù–µ —É–∫–∞–∑–∞–Ω" },
        lastPlayerId: null,
        govMessageTrackers: {}
    };

    const displayName = `${config.accountInfo.nickname} [S${config.accountInfo.server}]`;

    function debugLog(message) {
        if (config.debug) {
            console.log(`[DEBUG][${config.accountInfo.nickname}]`, message);
        }
    }

    function getPlayerIdFromHUD() {
        try {
            const hudElements = document.querySelectorAll('.hud-hassle-info-data');
            if (hudElements.length > 0) {
                const idElement = hudElements[0].querySelector('div:nth-child(3)');
                if (idElement) {
                    const idText = idElement.textContent;
                    const idMatch = idText.match(/ID\s*(\d+)/);
                    if (idMatch) return idMatch[1];
                }
            }
            return null;
        } catch (e) {
            debugLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HUD ID: ${e.message}`);
            return null;
        }
    }

    function trackPlayerId() {
        if (!config.trackPlayerId) return;

        const currentId = getPlayerIdFromHUD();
        
        if (currentId && currentId !== config.lastPlayerId) {
            debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π ID (HUD): ${currentId}`);
            config.lastPlayerId = currentId;
        }

        setTimeout(trackPlayerId, config.idCheckInterval);
    }

    function createButton(text, command) {
        return {
            text: text,
            callback_data: command
        };
    }

    function sendToTelegram(message, silent = false, replyMarkup = null) {
        config.chatIds.forEach(chatId => {
            const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
            const payload = {
                chat_id: chatId,
                text: message,
                parse_mode: 'HTML',
                disable_notification: silent,
                reply_markup: replyMarkup ? JSON.stringify(replyMarkup) : undefined
            };

            const xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onload = function() {
                if (xhr.status === 200) {
                    debugLog(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —á–∞—Ç ${chatId}`);
                } else {
                    debugLog(`–û—à–∏–±–∫–∞ Telegram API –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, xhr.status, xhr.responseText);
                }
            };
            xhr.onerror = function() {
                debugLog(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç ${chatId}`);
            };
            xhr.send(JSON.stringify(payload));
        });
    }

    function editMessageReplyMarkup(chatId, messageId, replyMarkup) {
        const url = `https://api.telegram.org/bot${config.botToken}/editMessageReplyMarkup`;
        const payload = {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: replyMarkup
        };

        const xhr = new XMLHttpRequest();
        xhr.open('POST', url, true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify(payload));
    }

    function editMessageText(chatId, messageId, text, replyMarkup = null) {
        const url = `https://api.telegram.org/bot${config.botToken}/editMessageText`;
        const payload = {
            chat_id: chatId,
            message_id: messageId,
            text: text,
            parse_mode: 'HTML',
            reply_markup: replyMarkup ? JSON.stringify(replyMarkup) : undefined
        };

        const xhr = new XMLHttpRequest();
        xhr.open('POST', url, true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify(payload));
    }

	function sendWelcomeMessage() {
		const playerIdDisplay = config.lastPlayerId ? ` (ID: ${config.lastPlayerId})` : '';
		const message = `üü¢ <b>Hassle | Bot TG</b>\n` +
			`–ù–∏–∫: ${config.accountInfo.nickname}${playerIdDisplay}\n` +
			`–°–µ—Ä–≤–µ—Ä: ${config.accountInfo.server}\n` +
			`–ù–æ–º–µ—Ä: ${config.userNumber}\n` +
			`–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç: /chat${config.userNumber}\n\n` +
			`üîî <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n` +
			`‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è PayDay: ${config.paydayNotifications ? 'üü¢ –í–ö–õ' : 'üî¥ –í–´–ö–õ'}\n` +
			`‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${config.govMessagesEnabled ? 'üü¢ –í–ö–õ' : 'üî¥ –í–´–ö–õ'}\n` +
			`‚îî –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: ${config.trackLocationRequests ? 'üü¢ –í–ö–õ' : 'üî¥ –í–´–ö–õ'}\n\n` +
			`üìã <b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
			`‚îú /p_on - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è PayDay\n` +
			`‚îú /p_off - –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è PayDay\n` +
			`‚îú /soob_on - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n` +
			`‚îú /soob_off - –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n` +
			`‚îú /mesto_on - –í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è\n` +
			`‚îú /mesto_off - –í—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è` +
			`‚îú /afk_n - –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ –Ω–æ—á—å.\n` +
			`‚îî /afk - –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ –Ω–æ—á—å –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç - /afk [–Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞] [id –≤ —Ñ–æ—Ä–º–∞—Ç–µ 222]`;

		const replyMarkup = {
			inline_keyboard: [
				[createButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "show_controls")]
			]
		};

		sendToTelegram(message, false, replyMarkup);
	}


    function showControlsMenu(chatId, messageId) {
        const replyMarkup = {
            inline_keyboard: [
                [
                    createButton("üèõÔ∏è–í—ã–∫–ª —É–≤–µ–¥. –ø—Ä–∞–≤–∏–∫", "local_soob_off"),
                    createButton("üîî–í–∫–ª —É–≤–µ–¥. –ø—Ä–∞–≤–∏–∫", "local_soob_on")
                ],
                [
                    createButton("üìç–í–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", "local_mesto_on"),
                    createButton("üîï–í—ã–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", "local_mesto_off")
                ],
                [
                    createButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç", "request_chat_message"),
                    createButton("‚¨ÜÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å", "hide_controls")
                ]
            ]
        };

        editMessageReplyMarkup(chatId, messageId, replyMarkup);
    }

    function hideControlsMenu(chatId, messageId) {
        const replyMarkup = {
            inline_keyboard: [
                [createButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "show_controls")]
            ]
        };

        editMessageReplyMarkup(chatId, messageId, replyMarkup);
    }

    function checkTelegramCommands() {
        const url = `https://api.telegram.org/bot${config.botToken}/getUpdates?offset=${config.lastUpdateId + 1}`;

        const xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.onload = function() {
            if (xhr.status === 200) {
                try {
                    const data = JSON.parse(xhr.responseText);
                    if (data.ok && data.result.length > 0) {
                        processUpdates(data.result);
                    }
                } catch (e) {
                    debugLog('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Telegram:', e);
                }
            }
            setTimeout(checkTelegramCommands, 3000);
        };
        xhr.onerror = function(error) {
            debugLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∞–Ω–¥:', error);
            setTimeout(checkTelegramCommands, 3000);
        };
        xhr.send();
    }

    function processUpdates(updates) {
        for (const update of updates) {
            config.lastUpdateId = update.update_id;

            if (update.message) {
                const message = update.message.text ? update.message.text.trim() : '';

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞
                if (update.message.reply_to_message) {
                    const replyToText = update.message.reply_to_message.text || '';
                    
                    // –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
                    if (replyToText.includes(`‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${displayName}:`)) {
                        const textToSend = message;
                        if (textToSend) {
                            debugLog(`[${displayName}] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${textToSend}`);
                            try {
                                sendChatInput(textToSend);
                                sendToTelegram(`‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${displayName}:</b>\n<code>${textToSend.replace(/</g, '<')}</code>`);
                            } catch (err) {
                                const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n<code>${err.message}</code>`;
                                debugLog(errorMsg);
                                sendToTelegram(errorMsg);
                            }
                        }
                        continue;
                    }
                    
                    // –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    if (replyToText.includes(`‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è ${displayName}:`)) {
                        const textToSend = message;
                        if (textToSend) {
                            debugLog(`[${displayName}] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: ${textToSend}`);
                            try {
                                sendChatInput(textToSend);
                                sendToTelegram(`‚úÖ <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${displayName}:</b>\n<code>${textToSend.replace(/</g, '<')}</code>`);
                            } catch (err) {
                                const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç\n<code>${err.message}</code>`;
                                debugLog(errorMsg);
                                sendToTelegram(errorMsg);
                            }
                        }
                        continue;
                    }
                }

                // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã)
                if (message === '/p_off') {
                    config.paydayNotifications = false;
                    sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                } 
                else if (message === '/p_on') {
                    config.paydayNotifications = true;
                    sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                } 
                else if (message === '/soob_off') {
                    config.govMessagesEnabled = false;
                    sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                } 
                else if (message === '/soob_on') {
                    config.govMessagesEnabled = true;
                    sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                } 
                else if (message === '/mesto_on') {
                    config.trackLocationRequests = true;
                    sendToTelegram(`üìç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                } 
                else if (message === '/mesto_off') {
                    config.trackLocationRequests = false;
                    sendToTelegram(`üîï <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                }
                // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                else if (message.startsWith(`/chat${config.userNumber} `)) {
                    const textToSend = message.replace(`/chat${config.userNumber} `, '').trim();
                    debugLog(`[${displayName}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${textToSend}`);
                    try {
                        sendChatInput(textToSend);
                        sendToTelegram(`‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${displayName}:</b>\n<code>${textToSend.replace(/</g, '<')}</code>`);
                    } catch (err) {
                        const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n<code>${err.message}</code>`;
                        debugLog(errorMsg);
                        sendToTelegram(errorMsg);
                    }
                }
                else if (message.startsWith('/afk ')) {
                    const parts = message.split(' ');
                    if (parts.length >= 3) {
                        const targetNumber = parts[1];
                        const id = parts[2];

                        if (targetNumber === config.userNumber) {
                            const idFormats = [id];
                            if (id.includes('-')) {
                                idFormats.push(id.replace(/-/g, ''));
                            } else if (id.length === 3) {
                                idFormats.push(`${id[0]}-${id[1]}-${id[2]}`);
                            }

                            config.afkSettings = {
                                id: id,
                                formats: idFormats,
                                active: true
                            };

                            sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>\nID: ${id}\n–§–æ—Ä–º–∞—Ç—ã: ${idFormats.join(', ')}`);
                        }
                    }
                } 
                else if (message.startsWith('/afk_n')) {
                    const parts = message.split(' ');
                    let targetNumber = config.userNumber;
                    
                    if (parts.length >= 2 && parts[1]) {
                        targetNumber = parts[1];
                    }

                    if (targetNumber === config.userNumber) {
                        const hudId = getPlayerIdFromHUD();
                        if (!hudId) {
                            sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ HUD`);
                            continue;
                        }

                        const idFormats = [hudId];
                        if (hudId.includes('-')) {
                            idFormats.push(hudId.replace(/-/g, ''));
                        } else if (hudId.length === 3) {
                            idFormats.push(`${hudId[0]}-${hudId[1]}-${hudId[2]}`);
                        }

                        config.afkSettings = {
                            id: hudId,
                            formats: idFormats,
                            active: true
                        };

                        sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>\nID –∏–∑ HUD: ${hudId}\n–§–æ—Ä–º–∞—Ç—ã: ${idFormats.join(', ')}`);
                    }
                } 
                else if (message.startsWith('/register ')) {
                    const parts = message.split(' ');
                    if (parts.length >= 3) {
                        const userNumber = parts[1];
                        const nickname = parts.slice(2).join(' ');
                        config.activeUsers[userNumber] = nickname;
                        debugLog(`[${displayName}] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userNumber} - ${nickname}`);
                    }
                } 
                else if (message === '/list') {
                    sendWelcomeMessage();
                }
            } 
            else if (update.callback_query) {
                const message = update.callback_query.data;
                const chatId = update.callback_query.message.chat.id;
                const messageId = update.callback_query.message.message_id;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –±–æ—Ç—É
                const messageText = update.callback_query.message.text || '';
                const isForThisBot = messageText.includes(`–ù–æ–º–µ—Ä: ${config.userNumber}`) || 
                                    messageText.includes(displayName) ||
                                    (update.callback_query.message.reply_to_message && 
                                     update.callback_query.message.reply_to_message.text && 
                                     update.callback_query.message.reply_to_message.text.includes(displayName));
                
                if (!isForThisBot) {
                    debugLog(`–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback_query, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (${displayName})`);
                    continue;
                }
                
                if (message === "show_controls") {
                    showControlsMenu(chatId, messageId);
                } 
                else if (message === "hide_controls") {
                    hideControlsMenu(chatId, messageId);
                }
                else if (message === "request_chat_message") {
                    const requestMsg = `‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${displayName}:\n(–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ /chat${config.userNumber} –≤–∞—à_—Ç–µ–∫—Å—Ç)`;
                    sendToTelegram(requestMsg, false, {
                        force_reply: true
                    });
                }
                else if (message.startsWith("admin_reply_")) {
                    const accountNumber = message.replace("admin_reply_", "");
                    if (accountNumber === config.userNumber) {
                        const requestMsg = `‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è ${displayName}:`;
                        sendToTelegram(requestMsg, false, {
                            force_reply: true
                        });
                    }
                }
                else if (message === "local_soob_off") {
                    config.govMessagesEnabled = false;
                    sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                } 
                else if (message === "local_soob_on") {
                    config.govMessagesEnabled = true;
                    sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                } 
                else if (message === "local_mesto_on") {
                    config.trackLocationRequests = true;
                    sendToTelegram(`üìç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                } 
                else if (message === "local_mesto_off") {
                    config.trackLocationRequests = false;
                    sendToTelegram(`üîï <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${displayName}</b>`);
                    sendWelcomeMessage();
                }
            }
        }
    }

    function registerUser() {
        config.activeUsers[config.userNumber] = config.accountInfo.nickname;
        debugLog(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${displayName} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ`);
    }

    function isNonRPMessage(message) {
        return message.includes('((') && message.includes('))');
    }

    function checkIDFormats(message) {
        const idRegex = /(\d-\d-\d|\d{3})/g;
        const matches = message.match(idRegex);
        return matches ? matches : [];
    }

    function checkRoleAndActionConditions(lowerCaseMessage) {
        const hasRoleKeyword = (
            lowerCaseMessage.indexOf("–¥–µ–ø—É—Ç–∞—Ç") !== -1 ||
            lowerCaseMessage.indexOf("–≤–∏—Ü–µ-–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
            lowerCaseMessage.indexOf("–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
            lowerCaseMessage.indexOf("–ª–∏—Ü–µ–Ω–∑—ë—Ä") !== -1
        );

        const hasActionKeyword = (
            lowerCaseMessage.indexOf("–º–µ—Å—Ç–æ") !== -1 ||
            lowerCaseMessage.indexOf("–≤–∞—à–µ") !== -1 ||
            lowerCaseMessage.indexOf("–∂–µ—Ç–æ–Ω") !== -1
        );

        return hasRoleKeyword && hasActionKeyword;
    }

    function checkAFKConditions(msg, lowerCaseMessage) {
        if (!config.afkSettings.active) return false;

        const hasConditions = checkRoleAndActionConditions(lowerCaseMessage);
        const hasID = config.afkSettings.formats.some(format => msg.includes(format));

        return hasConditions && hasID;
    }

    function checkLocationRequest(msg, lowerCaseMessage) {
        if (!config.trackLocationRequests && !isTargetingPlayer(msg)) {
            return false;
        }

        const hasRoleKeyword = /(–¥–µ–ø—É—Ç–∞—Ç|–≤–∏—Ü–µ-–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä|–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä|–ª–∏—Ü–µ–Ω–∑—ë—Ä)/i.test(lowerCaseMessage);
        const hasActionKeyword = config.locationKeywords.some(word => lowerCaseMessage.includes(word));
        const hasID = isTargetingPlayer(msg);

        return hasRoleKeyword && (hasActionKeyword || hasID);
    }

    function isTargetingPlayer(msg) {
        if (!config.lastPlayerId) return false;

        const idFormats = [
            config.lastPlayerId,
            config.lastPlayerId.split('').join('-')
        ];

        return idFormats.some(format => msg.includes(format));
    }

    function processSalaryAndBalance(msg) {
        if (!config.paydayNotifications) return;

        const salaryMatch = msg.match(/–ó–∞—Ä–ø–ª–∞—Ç–∞: \{[\w]+\}(\d+) —Ä—É–±/);
        if (salaryMatch) {
            config.lastSalaryInfo = config.lastSalaryInfo || {};
            config.lastSalaryInfo.salary = salaryMatch[1];
            debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: ${salaryMatch[1]} —Ä—É–±`);
        }

        const balanceMatch = msg.match(/–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: \{[\w]+\}(\d+) —Ä—É–±/);
        if (balanceMatch) {
            config.lastSalaryInfo = config.lastSalaryInfo || {};
            config.lastSalaryInfo.balance = balanceMatch[1];
            debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: ${balanceMatch[1]} —Ä—É–±`);
        }

        if (config.lastSalaryInfo && config.lastSalaryInfo.salary && config.lastSalaryInfo.balance) {
            const message = `+ PayDay | ${displayName}:\n–ó–∞—Ä–ø–ª–∞—Ç–∞: ${config.lastSalaryInfo.salary} —Ä—É–±\n–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: ${config.lastSalaryInfo.balance} —Ä—É–±`;
            sendToTelegram(message);
            config.lastSalaryInfo = null;
        }
    }

    function checkGovMessageConditions(msg, senderName, senderId) {
        if (!config.govMessagesEnabled) return false;

        const lowerMsg = msg.toLowerCase();
        const hasKeyword = config.govMessageKeywords.some(keyword => 
            lowerMsg.includes(keyword.toLowerCase())
        );

        const trackerKey = `${senderName}_${senderId}`;
        const now = Date.now();
        let tracker = config.govMessageTrackers[trackerKey];

        if (!tracker) {
            tracker = {
                count: 1,
                lastMessageTime: now,
                cooldownEnd: 0
            };
            config.govMessageTrackers[trackerKey] = tracker;
            return true;
        }

        if (hasKeyword && tracker.cooldownEnd > 0) {
            debugLog(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è ${senderName}`);
            tracker.cooldownEnd = 0;
            tracker.count = 1;
            return true;
        }

        if (now < tracker.cooldownEnd) {
            return false;
        }

        if (now - tracker.lastMessageTime > config.govMessageCooldown) {
            tracker.count = 1;
            tracker.lastMessageTime = now;
            return true;
        }

        tracker.count++;
        tracker.lastMessageTime = now;

        if (tracker.count > config.govMessageThreshold) {
            tracker.cooldownEnd = now + config.govMessageCooldown;
            debugLog(`–ë–ª–æ–∫–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç ${senderName} –Ω–∞ 6 –º–∏–Ω—É—Ç`);
            return false;
        }

        return true;
    }

    function initializeChatMonitor() {
        if (typeof tt === 'undefined' || typeof tt.methods === 'undefined' || typeof tt.methods.add !== 'function') {
            debugLog('tt.methods.add –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }

        if (typeof sendChatInput === 'undefined') {
            const errorMsg = '‚ùå <b>–û—à–∏–±–∫–∞</b>\nsendChatInput –Ω–µ –Ω–∞–π–¥–µ–Ω';
            debugLog(errorMsg);
            sendToTelegram(errorMsg);
            return false;
        }

        if (typeof window.playSound === 'undefined') {
            debugLog('–§—É–Ω–∫—Ü–∏—è playSound –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é');
            window.playSound = function(url, loop, volume) {
                const audio = new Audio(url);
                audio.loop = loop || false;
                audio.volume = volume || 1.0;
                audio.play().catch(e => debugLog('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e));
            };
        }

        const originalAdd = tt.methods.add;

        tt.methods.add = function(e, i, t) {
            originalAdd.call(this, e, i, t);

            const msg = String(e);
            const lowerCaseMessage = msg.toLowerCase();
            const currentTime = Date.now();

            const govMessageRegex = /^- (.+?) \{CCFF00}\(\{v:([^}]+)}\)\[(\d+)\]/;
            const govMatch = msg.match(govMessageRegex);
            if (govMatch) {
                const messageText = govMatch[1];
                const senderName = govMatch[2];
                const senderId = govMatch[3];
                
                debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞: ${senderName}[${senderId}] - ${messageText}`);
                
                if (checkGovMessageConditions(messageText, senderName, senderId)) {
                    const replyMarkup = {
                        inline_keyboard: [
                            [createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", `admin_reply_${config.userNumber}`)]
                        ]
                    };
                    sendToTelegram(`üèõÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (${displayName}):</b>\nüë§ ${senderName} [ID: ${senderId}]\nüí¨ ${messageText}`, false, replyMarkup);
                }
            }

            processSalaryAndBalance(msg);

            if (config.keywords.some(kw => lowerCaseMessage.includes(kw.toLowerCase()))) {
                debugLog('–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:', e);
                sendToTelegram(`üîî <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (${displayName}):</b>\n<code>${msg.replace(/</g, '<')}</code>`);

                setTimeout(() => {
                    try {
                        debugLog('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /c');
                        sendChatInput("/c");
                        debugLog('–ö–æ–º–∞–Ω–¥–∞ /c –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                    } catch (err) {
                        const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /c\n<code>${err.message}</code>`;
                        debugLog(errorMsg);
                        sendToTelegram(errorMsg);
                    }
                }, config.clearDelay);
            }

            if ((lowerCaseMessage.indexOf("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") !== -1 && lowerCaseMessage.indexOf("–¥–ª—è") !== -1) ||
                (msg.includes("[A]") && msg.includes("((")) ||
                (lowerCaseMessage.includes("–ø–æ–¥–±—Ä–æ—Å–∏–ª") &&
                    (currentTime - config.lastPodbrosTime > config.podbrosCooldown || config.podbrosCounter < 2))) {

                if (lowerCaseMessage.includes("–ø–æ–¥–±—Ä–æ—Å–∏–ª")) {
                    config.podbrosCounter++;
                    if (config.podbrosCounter <= 2) {
                        debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–±—Ä–æ—Å!');
                        const replyMarkup = {
                            inline_keyboard: [
                                [createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", `admin_reply_${config.userNumber}`)]
                            ]
                        };
                        sendToTelegram(`üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–±—Ä–æ—Å! (${displayName})</b>\n<code>${msg.replace(/</g, '<')}</code>`, false, replyMarkup);
                        window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/uved.mp3", false, 1.0);
                    }

                    if (currentTime - config.lastPodbrosTime > config.podbrosCooldown) {
                        config.podbrosCounter = 0;
                    }
                    config.lastPodbrosTime = currentTime;
                } else {
                    debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!');
                    const replyMarkup = {
                        inline_keyboard: [
                            [createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", `admin_reply_${config.userNumber}`)]
                        ]
                    };
                    sendToTelegram(`üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! (${displayName})</b>\n<code>${msg.replace(/</g, '<')}</code>`, false, replyMarkup);
                    window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/uved.mp3", false, 1.0);
                }
            }

            if (!isNonRPMessage(msg) && (
                    (lowerCaseMessage.indexOf("–¥–µ–ø—É—Ç–∞—Ç") !== -1 ||
                        lowerCaseMessage.indexOf("–≤–∏—Ü–µ-–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
                        lowerCaseMessage.indexOf("–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
                        lowerCaseMessage.indexOf("–ª–∏—Ü–µ–Ω–∑—ë—Ä") !== -1) &&
                    (lowerCaseMessage.indexOf("—Å—Ç—Ä–æ–π") !== -1 ||
                        lowerCaseMessage.indexOf("—Å–±–æ—Ä") !== -1 ||
                        lowerCaseMessage.indexOf("–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å") !== -1 ||
                        lowerCaseMessage.indexOf("–∫–æ–Ω—Ñ") !== -1)
                )) {
                debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ—Ä/—Å—Ç—Ä–æ–π!');
                sendToTelegram(`üì¢ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ—Ä/—Å—Ç—Ä–æ–π! (${displayName})</b>\n<code>${msg.replace(/</g, '<')}</code>`);
                window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/steroi.mp3", false, 1.0);

                setTimeout(() => {
                    sendChatInput("/q");
                    debugLog('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /q');
                    sendToTelegram(`‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ /q (${displayName})</b>`);
                }, 30);
            }

            if (lowerCaseMessage.indexOf("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") !== -1 &&
                lowerCaseMessage.indexOf("–∫–∏–∫–Ω—É–ª") !== -1 &&
                msg.includes(config.accountInfo.nickname)) {
                debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∏–∫ ${displayName}!`);
                const replyMarkup = {
                    inline_keyboard: [
                        [createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", `admin_reply_${config.userNumber}`)]
                    ]
                };
                sendToTelegram(`üí¢ <b>–ö–ò–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê! (${displayName})</b>\n<code>${msg.replace(/</g, '<')}</code>`, false, replyMarkup);
                window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/kick.mp3", false, 1.0);
            }

            if (!isNonRPMessage(msg) && checkLocationRequest(msg, lowerCaseMessage)) {
                debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è!');
                const replyMarkup = {
                    inline_keyboard: [
                        [createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", `admin_reply_${config.userNumber}`)]
                    ]
                };
                sendToTelegram(`üìç <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (${displayName}):</b>\n<code>${msg.replace(/</g, '<')}</code>`, false, replyMarkup);
            }

            if (!isNonRPMessage(msg) && checkAFKConditions(msg, lowerCaseMessage)) {
                debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ AFK —É—Å–ª–æ–≤–∏–µ!');
                sendChatInput("/q");
                sendToTelegram(`‚ö° <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ /q (${displayName})</b>\n–ü–æ AFK —É—Å–ª–æ–≤–∏—é –¥–ª—è ID: ${config.afkSettings.id}\n<code>${msg.replace(/</g, '<')}</code>`);
            }
        };

        debugLog('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

        if (!config.initialized) {
            sendWelcomeMessage();
            registerUser();
            config.initialized = true;
            
            if (config.trackPlayerId) {
                debugLog('–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ID –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ HUD...');
                trackPlayerId();
            }
        }

        checkTelegramCommands();
        return true;
    }

    debugLog('–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω');

    if (!initializeChatMonitor()) {
        let attempts = 0;
        const intervalId = setInterval(() => {
            attempts++;

            if (initializeChatMonitor()) {
                clearInterval(intervalId);
            } else if (attempts >= config.maxAttempts) {
                clearInterval(intervalId);
                const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ ${config.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`;
                debugLog(errorMsg);
                sendToTelegram(errorMsg);
            } else {
                debugLog(`–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ #${attempts}`);
            }
        }, config.checkInterval);
    }
})();