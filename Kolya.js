// –≤ —Å–ª—É—á–∞–µ index –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –≤ hud.js 
if (tt?.methods?.add) {
	const originalAdd = tt.methods.add;
	tt.methods.add = function(e, s, t) {
		const result = originalAdd.call(this, e, s, t);
		window.OnChatAddMessage?.(e, s, t);
		return result;
	};
} 
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è AFK-–∑–∞–ø—Ä–æ—Å–∞ –∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const globalState = {
	awaitingAfkAccount: false,
	awaitingAfkId: false,
	afkTargetAccount: null,
	lastWelcomeMessageId: null // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–¥–∏—É—Å—ã —á–∞—Ç–∞
const CHAT_RADIUS = {
	SELF: 0, // –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	CLOSE: 1, // –ë–ª–∏–∑–∫–æ (< radius/4)
	MEDIUM: 2, // –°—Ä–µ–¥–Ω–µ (< radius/2)
	FAR: 3, // –î–∞–ª–µ–∫–æ (>= radius/2)
	RADIO: 4, // –†–∞—Ü–∏—è
	UNKNOWN: -1 // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç
};

function normalizeColor(color) {
	let normalized = color.toString().toUpperCase();
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å #, –µ—Å–ª–∏ –µ—Å—Ç—å
	if (normalized.startsWith('#')) {
		normalized = normalized.slice(1);
	}
	// –ï—Å–ª–∏ —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA (8 —Å–∏–º–≤–æ–ª–æ–≤), —É–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
	if (normalized.length === 8) {
		normalized = normalized.slice(0, 6);
	}
	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 0x
	return '0x' + normalized;
}

function getChatRadius(color) {
	const normalizedColor = normalizeColor(color);

	switch (normalizedColor) {
		case '0xEEEEEE':
			return CHAT_RADIUS.SELF;
		case '0xCECECE':
			return CHAT_RADIUS.CLOSE;
		case '0x999999':
			return CHAT_RADIUS.MEDIUM;
		case '0x6B6B6B':
			return CHAT_RADIUS.FAR;
		case '0x33CC66':
			return CHAT_RADIUS.RADIO;
		default:
			return CHAT_RADIUS.UNKNOWN;
	}
}

// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
const userConfig = {
	botToken: '8184449811:AAE-nssyxdjAGnCkNCKTMN8rc2xgWEaVOFA',
	chatIds: ['5515408606'], // 1046461621 - Zahar, 5515408606 = Kolya, 
	keywords: [],
	clearDelay: 3000,
	maxAttempts: 15,
	checkInterval: 1000,
	debug: true,
	podbrosCooldown: 30000,
	afkSettings: {},
	lastSalaryInfo: null,
	paydayNotifications: true,
	trackPlayerId: true,
	idCheckInterval: 10000,
	govMessagesEnabled: true,
	govMessageCooldown: 360000,
	govMessageThreshold: 10,
	govMessageKeywords: ["—Ç—É—Ç", "–∑–¥–µ—Å—å"],
	trackLocationRequests: false,
	locationKeywords: ["–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–º–µ—Å—Ç–æ", "–ø–æ–∑–∏—Ü–∏—è", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"],
	radioOfficialNotifications: true,
	warningNotifications: true,
	notificationDeleteDelay: 5000 // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
};

const config = {
	...userConfig,
	lastUpdateId: 0,
	activeUsers: {},
	lastPodbrosTime: 0,
	podbrosCounter: 0,
	initialized: false,
	accountInfo: {
		nickname: null,
		server: null
	},
	lastPlayerId: null,
	govMessageTrackers: {},
	isSitting: false,
	afkCycle: {
		active: false,
		startTime: null,
		totalPlayTime: 0,
		currentPlayTime: 0,
		currentPauseTime: 0,
		cycleTimer: null,
		playTimer: null,
		pauseTimer: null,
		mainTimer: null,
		mode: 'fixed'
	},
	nicknameLogged: false
};

let displayName = `User [S${config.accountInfo.server || '–ù–µ —É–∫–∞–∑–∞–Ω'}]`;
let uniqueId = `${config.accountInfo.nickname}_${config.accountInfo.server}`;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–≤—Ö–æ–¥–∞
const autoLoginConfig = {
	password: "zahar2007", // –í–∞—à –ø–∞—Ä–æ–ª—å
	enabled: true, // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–≤—Ö–æ–¥–∞
	maxAttempts: 10, // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
	attemptInterval: 1000 // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–º—Å)
};

function debugLog(message) {
    if (config.debug) {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        const currentTime = `${hours}:${minutes}:${seconds}`;
        console.log(`[${currentTime}] [DEBUG][${config.accountInfo.nickname || 'Unknown'}]`, message);
    }
}

function getPlayerIdFromHUD() {
	try {
		const hudElements = document.querySelectorAll('.hud-hassle-info-data');
		if (hudElements.length > 0) {
			const idElement = hudElements[0].querySelector('div:nth-child(3)');
			if (idElement) {
				const idText = idElement.textContent;
				const idMatch = idText.match(/ID\s*(\d+)/);
				if (idMatch) return idMatch[1];
			}
		}
		return null;
	} catch (e) {
		debugLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HUD ID: ${e.message}`);
		return null;
	}
}

function trackPlayerId() {
	if (!config.trackPlayerId) return;

	const currentId = getPlayerIdFromHUD();

	if (currentId && currentId !== config.lastPlayerId) {
		debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π ID (HUD): ${currentId}`);
		config.lastPlayerId = currentId;
	}

	setTimeout(trackPlayerId, config.idCheckInterval);
}

function trackNicknameAndServer() {
	try {
		const nickname = window.interface("Menu").$store.getters["menu/nickName"];
		const serverId = window.interface("Menu").$store.getters["menu/selectedServer"];
		if (nickname && serverId && !config.nicknameLogged) {
			console.log(`nickname: ${nickname}, Server: ${serverId}`);
			config.nicknameLogged = true;
			config.accountInfo.nickname = nickname;
			config.accountInfo.server = serverId.toString();
			displayName = `${config.accountInfo.nickname} [S${config.accountInfo.server}]`;
			uniqueId = `${config.accountInfo.nickname}_${config.accountInfo.server}`;
			sendWelcomeMessage();
			registerUser();
		} else if (!nickname || !serverId) {
			debugLog(`–ù–∏–∫ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã: nickname=${nickname}, server=${serverId}`);
		}
	} catch (e) {
		debugLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–∞/—Å–µ—Ä–≤–µ—Ä–∞: ${e.message}`);
	}
	setTimeout(trackNicknameAndServer, 900);
}

function createButton(text, command) {
	return {
		text: text,
		callback_data: command
	};
}

function deleteMessage(chatId, messageId) {
	const url = `https://api.telegram.org/bot${config.botToken}/deleteMessage`;
	const payload = {
		chat_id: chatId,
		message_id: messageId
	};

	const xhr = new XMLHttpRequest();
	xhr.open('POST', url, true);
	xhr.setRequestHeader('Content-Type', 'application/json');
	xhr.send(JSON.stringify(payload));
}

function sendToTelegram(message, silent = false, replyMarkup = null, deleteAfter = null) {
	config.chatIds.forEach(chatId => {
		const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
		const payload = {
			chat_id: chatId,
			text: message,
			parse_mode: 'HTML',
			disable_notification: silent,
			reply_markup: replyMarkup ? JSON.stringify(replyMarkup) : undefined
		};

		const xhr = new XMLHttpRequest();
		xhr.open('POST', url, true);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.onload = function() {
			if (xhr.status === 200) {
				debugLog(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —á–∞—Ç ${chatId}`);
				const data = JSON.parse(xhr.responseText);
				const messageId = data.result.message_id;
				if (deleteAfter) {
					setTimeout(() => {
						deleteMessage(chatId, messageId);
					}, deleteAfter);
				}
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
				if (message.includes('Hassle | Bot TG') && message.includes('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')) {
					globalState.lastWelcomeMessageId = messageId;
				}
			} else {
				debugLog(`–û—à–∏–±–∫–∞ Telegram API –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, xhr.status, xhr.responseText);
			}
		};
		xhr.onerror = function() {
			debugLog(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç ${chatId}`);
		};
		xhr.send(JSON.stringify(payload));
	});
}

function editMessageReplyMarkup(chatId, messageId, replyMarkup) {
	const url = `https://api.telegram.org/bot${config.botToken}/editMessageReplyMarkup`;
	const payload = {
		chat_id: chatId,
		message_id: messageId,
		reply_markup: replyMarkup
	};

	const xhr = new XMLHttpRequest();
	xhr.open('POST', url, true);
	xhr.setRequestHeader('Content-Type', 'application/json');
	xhr.send(JSON.stringify(payload));
}

function editMessageText(chatId, messageId, text, replyMarkup = null) {
	const url = `https://api.telegram.org/bot${config.botToken}/editMessageText`;
	const payload = {
		chat_id: chatId,
		message_id: messageId,
		text: text,
		parse_mode: 'HTML',
		reply_markup: replyMarkup ? JSON.stringify(replyMarkup) : undefined
	};

	const xhr = new XMLHttpRequest();
	xhr.open('POST', url, true);
	xhr.setRequestHeader('Content-Type', 'application/json');
	xhr.onload = function() {
		if (xhr.status === 200) {
			debugLog(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ Telegram —á–∞—Ç–µ ${chatId}`);
		} else {
			debugLog(`–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ ${chatId}:`, xhr.status, xhr.responseText);
		}
	};
	xhr.onerror = function() {
		debugLog(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ —á–∞—Ç–µ ${chatId}`);
	};
	xhr.send(JSON.stringify(payload));
}

function sendWelcomeMessage() {
	if (!config.accountInfo.nickname) {
		debugLog('–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
		return;
	}
	const playerIdDisplay = config.lastPlayerId ? ` (ID: ${config.lastPlayerId})` : '';
	const message = `üü¢ <b>Hassle | Bot TG</b>\n` +
		`–ù–∏–∫: ${config.accountInfo.nickname}${playerIdDisplay}\n` +
		`–°–µ—Ä–≤–µ—Ä: ${config.accountInfo.server || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
		`üîî <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n` +
		`‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è PayDay: ${config.paydayNotifications ? 'üü¢ –í–ö–õ' : 'üî¥ –í–´–ö–õ'}\n` +
		`‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${config.govMessagesEnabled ? 'üü¢ –í–ö–õ' : 'üî¥ –í–´–ö–õ'}\n` +
		`‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞—Ü–∏–∏: ${config.radioOfficialNotifications ? 'üü¢ –í–ö–õ' : 'üî¥ –í–´–ö–õ'}\n` +
		`‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–≥–æ–≤–æ—Ä—ã: ${config.warningNotifications ? 'üü¢ –í–ö–õ' : 'üî¥ –í–´–ö–õ'}\n` +
		`‚îî –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: ${config.trackLocationRequests ? 'üü¢ –í–ö–õ' : 'üî¥ –í–´–ö–õ'}`;

	const replyMarkup = {
		inline_keyboard: [
			[createButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", `show_controls_${uniqueId}`)]
		]
	};

	config.chatIds.forEach(chatId => {
		if (globalState.lastWelcomeMessageId) {
			editMessageText(chatId, globalState.lastWelcomeMessageId, message, replyMarkup);
		} else {
			// –ï—Å–ª–∏ –Ω–µ—Ç ID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ onload sendToTelegram
			sendToTelegram(message, false, replyMarkup);
		}
	});
}

function showControlsMenu(chatId, messageId) {
	if (!config.accountInfo.nickname) {
		sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, false, null, config.notificationDeleteDelay);
		return;
	}
	const replyMarkup = {
		inline_keyboard: [
			[createButton("‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏", `show_local_functions_${uniqueId}`)],
			[createButton("üìã –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", `show_global_functions_${uniqueId}`)],
			[createButton("‚¨ÜÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å", `hide_controls_${uniqueId}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showGlobalFunctionsMenu(chatId, messageId, uniqueIdParam) {
	const replyMarkup = {
		inline_keyboard: [
			[createButton("üîî PayDay", `show_payday_options_${uniqueIdParam}`)],
			[createButton("üèõÔ∏è –°–æ–æ–±—â.", `show_soob_options_${uniqueIdParam}`)],
			[createButton("üìç –ú–µ—Å—Ç–æ", `show_mesto_options_${uniqueIdParam}`)],
			[createButton("üì° –†–∞—Ü–∏—è", `show_radio_options_${uniqueIdParam}`)],
			[createButton("‚ö†Ô∏è –í—ã–≥–æ–≤–æ—Ä—ã", `show_warning_options_${uniqueIdParam}`)],
			[
				createButton("üåô AFK –ù–æ—á—å", `global_afk_n_${uniqueIdParam}`),
				createButton("üîÑ AFK", `global_afk_${uniqueIdParam}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_controls_${uniqueIdParam}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showPayDayOptionsMenu(chatId, messageId, uniqueIdParam) {
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("üîî –í–ö–õ", `global_p_on_${uniqueIdParam}`),
				createButton("üîï –í–´–ö–õ", `global_p_off_${uniqueIdParam}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_global_functions_${uniqueIdParam}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showSoobOptionsMenu(chatId, messageId, uniqueIdParam) {
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("üîî –í–ö–õ", `global_soob_on_${uniqueIdParam}`),
				createButton("üîï –í–´–ö–õ", `global_soob_off_${uniqueIdParam}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_global_functions_${uniqueIdParam}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showMestoOptionsMenu(chatId, messageId, uniqueIdParam) {
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("üîî –í–ö–õ", `global_mesto_on_${uniqueIdParam}`),
				createButton("üîï –í–´–ö–õ", `global_mesto_off_${uniqueIdParam}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_global_functions_${uniqueIdParam}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showRadioOptionsMenu(chatId, messageId, uniqueIdParam) {
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("üîî –í–ö–õ", `global_radio_on_${uniqueIdParam}`),
				createButton("üîï –í–´–ö–õ", `global_radio_off_${uniqueIdParam}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_global_functions_${uniqueIdParam}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showWarningOptionsMenu(chatId, messageId, uniqueIdParam) {
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("üîî –í–ö–õ", `global_warning_on_${uniqueIdParam}`),
				createButton("üîï –í–´–ö–õ", `global_warning_off_${uniqueIdParam}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_global_functions_${uniqueIdParam}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showAFKNightModesMenu(chatId, messageId, uniqueIdParam) {
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("–° –ø–∞—É–∑–∞–º–∏", `afk_n_with_pauses_${uniqueIdParam}`),
				createButton("–ë–µ–∑ –ø–∞—É–∑", `afk_n_without_pauses_${uniqueIdParam}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_global_functions_${uniqueIdParam}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showAFKWithPausesSubMenu(chatId, messageId, uniqueIdParam) {
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("5/5 –º–∏–Ω—É—Ç", `afk_n_fixed_${uniqueIdParam}`),
				createButton("–†–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è", `afk_n_random_${uniqueIdParam}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `global_afk_n_${uniqueIdParam}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showLocalFunctionsMenu(chatId, messageId) {
	if (!config.accountInfo.nickname) {
		sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, false, null, config.notificationDeleteDelay);
		return;
	}
	const replyMarkup = {
		inline_keyboard: [
			[createButton("üö∂ –î–≤–∏–∂–µ–Ω–∏–µ", `show_movement_controls_${uniqueId}`)],
			[createButton("üèõÔ∏è –£–≤–µ–¥. –ø—Ä–∞–≤–∏–∫", `show_local_soob_options_${uniqueId}`)],
			[createButton("üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", `show_local_mesto_options_${uniqueId}`)],
			[createButton("üì° –†–∞—Ü–∏—è", `show_local_radio_options_${uniqueId}`)],
			[createButton("‚ö†Ô∏è –í—ã–≥–æ–≤–æ—Ä—ã", `show_local_warning_options_${uniqueId}`)],
			[createButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç", `request_chat_message_${uniqueId}`)],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_controls_${uniqueId}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showMovementControlsMenu(chatId, messageId, isNotification = false) {
	if (!config.accountInfo.nickname) {
		sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, false, null, config.notificationDeleteDelay);
		return;
	}
	const backButton = isNotification ? [] : [
		[createButton("‚¨ÜÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å", `show_local_functions_${uniqueId}`)]
	];
	const sitStandButton = config.isSitting ?
		createButton("üßç –í—Å—Ç–∞—Ç—å", `move_stand_${uniqueId}`) :
		createButton("ü™ë –°–µ—Å—Ç—å", `move_sit_${uniqueId}`);
	const replyMarkup = {
		inline_keyboard: [
			[createButton("‚¨ÜÔ∏è –í–ø–µ—Ä–µ–¥", `move_forward_${uniqueId}`)],
			[createButton("‚¨ÖÔ∏è –í–ª–µ–≤–æ", `move_left_${uniqueId}`), createButton("‚û°Ô∏è –í–ø—Ä–∞–≤–æ", `move_right_${uniqueId}`)],
			[createButton("‚¨áÔ∏è –ù–∞–∑–∞–¥", `move_back_${uniqueId}`)],
			[createButton("üÜô –ü—Ä—ã–∂–æ–∫", `move_jump_${uniqueId}`)],
			[sitStandButton],
			...backButton
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showLocalSoobOptionsMenu(chatId, messageId) {
	if (!config.accountInfo.nickname) {
		sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, false, null, config.notificationDeleteDelay);
		return;
	}
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("üîî –í–ö–õ", `local_soob_on_${uniqueId}`),
				createButton("üîï –í–´–ö–õ", `local_soob_off_${uniqueId}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_local_functions_${uniqueId}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showLocalMestoOptionsMenu(chatId, messageId) {
	if (!config.accountInfo.nickname) {
		sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, false, null, config.notificationDeleteDelay);
		return;
	}
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("üîî –í–ö–õ", `local_mesto_on_${uniqueId}`),
				createButton("üîï –í–´–ö–õ", `local_mesto_off_${uniqueId}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_local_functions_${uniqueId}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showLocalRadioOptionsMenu(chatId, messageId) {
	if (!config.accountInfo.nickname) {
		sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, false, null, config.notificationDeleteDelay);
		return;
	}
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("üîî –í–ö–õ", `local_radio_on_${uniqueId}`),
				createButton("üîï –í–´–ö–õ", `local_radio_off_${uniqueId}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_local_functions_${uniqueId}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function showLocalWarningOptionsMenu(chatId, messageId) {
	if (!config.accountInfo.nickname) {
		sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, false, null, config.notificationDeleteDelay);
		return;
	}
	const replyMarkup = {
		inline_keyboard: [
			[
				createButton("üîî –í–ö–õ", `local_warning_on_${uniqueId}`),
				createButton("üîï –í–´–ö–õ", `local_warning_off_${uniqueId}`)
			],
			[createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `show_local_functions_${uniqueId}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function hideControlsMenu(chatId, messageId) {
	if (!config.accountInfo.nickname) {
		sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, false, null, config.notificationDeleteDelay);
		return;
	}
	const replyMarkup = {
		inline_keyboard: [
			[createButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", `show_controls_${uniqueId}`)]
		]
	};

	editMessageReplyMarkup(chatId, messageId, replyMarkup);
}

function checkTelegramCommands() {
	const url = `https://api.telegram.org/bot${config.botToken}/getUpdates?offset=${config.lastUpdateId + 1}`;

	const xhr = new XMLHttpRequest();
	xhr.open('GET', url, true);
	xhr.onload = function() {
		if (xhr.status === 200) {
			try {
				const data = JSON.parse(xhr.responseText);
				if (data.ok && data.result.length > 0) {
					processUpdates(data.result);
				}
			} catch (e) {
				debugLog('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Telegram:', e);
			}
		}
		setTimeout(checkTelegramCommands, 1000);
	};
	xhr.onerror = function(error) {
		debugLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∞–Ω–¥:', error);
		setTimeout(checkTelegramCommands, 1000);
	};
	xhr.send();
}

function processUpdates(updates) {
	for (const update of updates) {
		config.lastUpdateId = update.update_id;

		if (update.message) {
			const message = update.message.text ? update.message.text.trim() : '';

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞
			if (update.message.reply_to_message) {
				const replyToText = update.message.reply_to_message.text || '';

				// –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
				if (replyToText.includes(`‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${displayName}:`)) {
					const textToSend = message;
					if (textToSend) {
						debugLog(`[${displayName}] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${textToSend}`);
						try {
							sendChatInput(textToSend);
							sendToTelegram(`‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${displayName}:</b>\n<code>${textToSend.replace(/</g, '&lt;')}</code>`, false, null, config.notificationDeleteDelay);
						} catch (err) {
							const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n<code>${err.message}</code>`;
							debugLog(errorMsg);
							sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
						}
					}
					continue;
				}

				// –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
				if (replyToText.includes(`‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è ${displayName}:`)) {
					const textToSend = message;
					if (textToSend) {
						debugLog(`[${displayName}] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: ${textToSend}`);
						try {
							sendChatInput(textToSend);
							sendToTelegram(`‚úÖ <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${displayName}:</b>\n<code>${textToSend.replace(/</g, '&lt;')}</code>`, false, null, config.notificationDeleteDelay);
						} catch (err) {
							const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç\n<code>${err.message}</code>`;
							debugLog(errorMsg);
							sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
						}
					}
					continue;
				}

				// –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∏–∫–∞ –¥–ª—è AFK
				if (replyToText.includes(`‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AFK —Ä–µ–∂–∏–º–∞:`)) {
					const accountNickname = message.trim();
					if (accountNickname && accountNickname === config.accountInfo.nickname) {
						globalState.afkTargetAccount = accountNickname;
						globalState.awaitingAfkAccount = false;
						globalState.awaitingAfkId = true;
						sendToTelegram(`‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AFK —Ä–µ–∂–∏–º–∞ –¥–ª—è ${displayName}:`, false, {
							force_reply: true
						});
					} else {
						sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`, false, {
							force_reply: true
						}, config.notificationDeleteDelay);
					}
					continue;
				}

				// –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å ID –¥–ª—è AFK
				if (replyToText.includes(`‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AFK —Ä–µ–∂–∏–º–∞ –¥–ª—è`) && globalState.awaitingAfkId) {
					const id = message.trim();
					if (globalState.afkTargetAccount === config.accountInfo.nickname) {
						const idFormats = [id];
						if (id.includes('-')) {
							idFormats.push(id.replace(/-/g, ''));
						} else if (id.length === 3) {
							idFormats.push(`${id[0]}-${id[1]}-${id[2]}`);
						}

						config.afkSettings = {
							id: id,
							formats: idFormats,
							active: true
						};

						globalState.awaitingAfkId = false;
						globalState.afkTargetAccount = null;

						sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>\nID: ${id}\n–§–æ—Ä–º–∞—Ç—ã: ${idFormats.join(', ')}`, false, null, config.notificationDeleteDelay);
					}
					continue;
				}
			}

			// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã)
			if (message === '/p_off') {
				config.paydayNotifications = false;
				sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message === '/p_on') {
				config.paydayNotifications = true;
				sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message === '/soob_off') {
				config.govMessagesEnabled = false;
				sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message === '/soob_on') {
				config.govMessagesEnabled = true;
				sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message === '/mesto_on') {
				config.trackLocationRequests = true;
				sendToTelegram(`üìç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message === '/mesto_off') {
				config.trackLocationRequests = false;
				sendToTelegram(`üîï <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`/chat${config.accountInfo.nickname}_${config.accountInfo.server} `)) {
				const textToSend = message.replace(`/chat${config.accountInfo.nickname}_${config.accountInfo.server} `, '').trim();
				debugLog(`[${displayName}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${textToSend}`);
				try {
					sendChatInput(textToSend);
					sendToTelegram(`‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${displayName}:</b>\n<code>${textToSend.replace(/</g, '&lt;')}</code>`, false, null, config.notificationDeleteDelay);
				} catch (err) {
					const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n<code>${err.message}</code>`;
					debugLog(errorMsg);
					sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				}
			} else if (message.startsWith('/afk ')) {
				const parts = message.split(' ');
				if (parts.length >= 3) {
					const targetNickname = parts[1];
					const id = parts[2];

					if (targetNickname === config.accountInfo.nickname) {
						const idFormats = [id];
						if (id.includes('-')) {
							idFormats.push(id.replace(/-/g, ''));
						} else if (id.length === 3) {
							idFormats.push(`${id[0]}-${id[1]}-${id[2]}`);
						}

						config.afkSettings = {
							id: id,
							formats: idFormats,
							active: true
						};

						sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>\nID: ${id}\n–§–æ—Ä–º–∞—Ç—ã: ${idFormats.join(', ')}`, false, null, config.notificationDeleteDelay);
					}
				}
			} else if (message.startsWith('/afk_n')) {
				const parts = message.split(' ');
				let targetNickname = config.accountInfo.nickname;

				if (parts.length >= 2 && parts[1]) {
					targetNickname = parts[1];
				}

				if (targetNickname === config.accountInfo.nickname) {
					const hudId = getPlayerIdFromHUD();
					if (!hudId) {
						sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ HUD`, false, null, config.notificationDeleteDelay);
						continue;
					}

					const idFormats = [hudId];
					if (hudId.includes('-')) {
						idFormats.push(hudId.replace(/-/g, ''));
					} else if (hudId.length === 3) {
						idFormats.push(`${hudId[0]}-${hudId[1]}-${hudId[2]}`);
					}

					config.afkSettings = {
						id: hudId,
						formats: idFormats,
						active: true
					};

					startAFKCycle();

					sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>\nID –∏–∑ HUD: ${hudId}\n–§–æ—Ä–º–∞—Ç—ã: ${idFormats.join(', ')}\nüîÅ <b>–ó–∞–ø—É—â–µ–Ω AFK —Ü–∏–∫–ª –¥–ª—è PayDay</b>`, false, null, config.notificationDeleteDelay);
				}
			} else if (message.startsWith('/register ')) {
				const parts = message.split(' ');
				if (parts.length >= 2) {
					const nickname = parts[1];
					config.activeUsers[nickname] = config.accountInfo.nickname || `User_${nickname}`;
					debugLog(`[${displayName}] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${nickname} - ${config.accountInfo.nickname}`);
				}
			} else if (message === '/list') {
				if (globalState.lastWelcomeMessageId) {
					config.chatIds.forEach(chatId => {
						deleteMessage(chatId, globalState.lastWelcomeMessageId);
					});
					globalState.lastWelcomeMessageId = null;
				}
				sendWelcomeMessage();
			}
		} else if (update.callback_query) {
			const message = update.callback_query.data;
			const chatId = update.callback_query.message.chat.id;
			const messageId = update.callback_query.message.message_id;

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
			const isGlobalCommand = message.startsWith('global_') ||
				message.startsWith('afk_n_') ||
				message.startsWith('show_payday_options_') ||
				message.startsWith('show_soob_options_') ||
				message.startsWith('show_mesto_options_') ||
				message.startsWith('show_radio_options_') ||
				message.startsWith('show_warning_options_') ||
				message.startsWith('show_global_functions_');

			let callbackUniqueId = null;
			if (message.startsWith('show_controls_')) {
				callbackUniqueId = message.replace('show_controls_', '');
			} else if (message.startsWith('show_local_functions_')) {
				callbackUniqueId = message.replace('show_local_functions_', '');
			} else if (message.startsWith('show_movement_controls_')) {
				callbackUniqueId = message.replace('show_movement_controls_', '');
			} else if (message.startsWith('show_movement_')) {
				callbackUniqueId = message.replace('show_movement_', '');
			} else if (message.startsWith('hide_controls_')) {
				callbackUniqueId = message.replace('hide_controls_', '');
			} else if (message.startsWith('request_chat_message_')) {
				callbackUniqueId = message.replace('request_chat_message_', '');
			} else if (message.startsWith('local_soob_on_')) {
				callbackUniqueId = message.replace('local_soob_on_', '');
			} else if (message.startsWith('local_soob_off_')) {
				callbackUniqueId = message.replace('local_soob_off_', '');
			} else if (message.startsWith('local_mesto_on_')) {
				callbackUniqueId = message.replace('local_mesto_on_', '');
			} else if (message.startsWith('local_mesto_off_')) {
				callbackUniqueId = message.replace('local_mesto_off_', '');
			} else if (message.startsWith('local_radio_on_')) {
				callbackUniqueId = message.replace('local_radio_on_', '');
			} else if (message.startsWith('local_radio_off_')) {
				callbackUniqueId = message.replace('local_radio_off_', '');
			} else if (message.startsWith('local_warning_on_')) {
				callbackUniqueId = message.replace('local_warning_on_', '');
			} else if (message.startsWith('local_warning_off_')) {
				callbackUniqueId = message.replace('local_warning_off_', '');
			} else if (message.startsWith('move_forward_')) {
				callbackUniqueId = message.replace('move_forward_', '');
			} else if (message.startsWith('move_back_')) {
				callbackUniqueId = message.replace('move_back_', '');
			} else if (message.startsWith('move_left_')) {
				callbackUniqueId = message.replace('move_left_', '');
			} else if (message.startsWith('move_right_')) {
				callbackUniqueId = message.replace('move_right_', '');
			} else if (message.startsWith('move_jump_')) {
				callbackUniqueId = message.replace('move_jump_', '');
			} else if (message.startsWith('move_sit_')) {
				callbackUniqueId = message.replace('move_sit_', '');
			} else if (message.startsWith('move_stand_')) {
				callbackUniqueId = message.replace('move_stand_', '');
			} else if (message.startsWith('admin_reply_')) {
				callbackUniqueId = message.replace('admin_reply_', '');
			} else if (message.startsWith('show_local_soob_options_')) {
				callbackUniqueId = message.replace('show_local_soob_options_', '');
			} else if (message.startsWith('show_local_mesto_options_')) {
				callbackUniqueId = message.replace('show_local_mesto_options_', '');
			} else if (message.startsWith('show_local_radio_options_')) {
				callbackUniqueId = message.replace('show_local_radio_options_', '');
			} else if (message.startsWith('show_local_warning_options_')) {
				callbackUniqueId = message.replace('show_local_warning_options_', '');
			} else if (message.startsWith('global_p_on_')) {
				callbackUniqueId = message.replace('global_p_on_', '');
			} else if (message.startsWith('global_p_off_')) {
				callbackUniqueId = message.replace('global_p_off_', '');
			} else if (message.startsWith('global_soob_on_')) {
				callbackUniqueId = message.replace('global_soob_on_', '');
			} else if (message.startsWith('global_soob_off_')) {
				callbackUniqueId = message.replace('global_soob_off_', '');
			} else if (message.startsWith('global_mesto_on_')) {
				callbackUniqueId = message.replace('global_mesto_on_', '');
			} else if (message.startsWith('global_mesto_off_')) {
				callbackUniqueId = message.replace('global_mesto_off_', '');
			} else if (message.startsWith('global_radio_on_')) {
				callbackUniqueId = message.replace('global_radio_on_', '');
			} else if (message.startsWith('global_radio_off_')) {
				callbackUniqueId = message.replace('global_radio_off_', '');
			} else if (message.startsWith('global_warning_on_')) {
				callbackUniqueId = message.replace('global_warning_on_', '');
			} else if (message.startsWith('global_warning_off_')) {
				callbackUniqueId = message.replace('global_warning_off_', '');
			} else if (message.startsWith('global_afk_n_')) {
				callbackUniqueId = message.replace('global_afk_n_', '');
			} else if (message.startsWith('global_afk_')) {
				callbackUniqueId = message.replace('global_afk_', '');
			} else if (message.startsWith('afk_n_with_pauses_')) {
				callbackUniqueId = message.replace('afk_n_with_pauses_', '');
			} else if (message.startsWith('afk_n_without_pauses_')) {
				callbackUniqueId = message.replace('afk_n_without_pauses_', '');
			} else if (message.startsWith('afk_n_fixed_')) {
				callbackUniqueId = message.replace('afk_n_fixed_', '');
			} else if (message.startsWith('afk_n_random_')) {
				callbackUniqueId = message.replace('afk_n_random_', '');
			} else if (message.startsWith('show_payday_options_')) {
				callbackUniqueId = message.replace('show_payday_options_', '');
			} else if (message.startsWith('show_soob_options_')) {
				callbackUniqueId = message.replace('show_soob_options_', '');
			} else if (message.startsWith('show_mesto_options_')) {
				callbackUniqueId = message.replace('show_mesto_options_', '');
			} else if (message.startsWith('show_radio_options_')) {
				callbackUniqueId = message.replace('show_radio_options_', '');
			} else if (message.startsWith('show_warning_options_')) {
				callbackUniqueId = message.replace('show_warning_options_', '');
			} else if (message.startsWith('show_global_functions_')) {
				callbackUniqueId = message.replace('show_global_functions_', '');
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
			const isForThisBot = isGlobalCommand ||
				(callbackUniqueId && callbackUniqueId === uniqueId) ||
				(update.callback_query.message.text && update.callback_query.message.text.includes(displayName)) ||
				(update.callback_query.message.reply_to_message &&
					update.callback_query.message.reply_to_message.text &&
					update.callback_query.message.reply_to_message.text.includes(displayName));

			if (!isForThisBot) {
				debugLog(`–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback_query, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ (${displayName}): ${message}`);
				continue;
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
			if (message.startsWith(`show_controls_`)) {
				showControlsMenu(chatId, messageId);
			} else if (message.startsWith(`show_global_functions_`)) {
				showGlobalFunctionsMenu(chatId, messageId, callbackUniqueId);
			} else if (message.startsWith(`show_local_functions_`)) {
				showLocalFunctionsMenu(chatId, messageId);
			} else if (message.startsWith(`show_movement_controls_`)) {
				showMovementControlsMenu(chatId, messageId);
			} else if (message.startsWith("show_movement_")) {
				showMovementControlsMenu(chatId, messageId, true);
			} else if (message.startsWith(`hide_controls_`)) {
				hideControlsMenu(chatId, messageId);
			} else if (message.startsWith(`request_chat_message_`)) {
				const requestMsg = `‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${displayName}:\n(–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ /chat${config.accountInfo.nickname}_${config.accountInfo.server} –≤–∞—à_—Ç–µ–∫—Å—Ç)`;
				sendToTelegram(requestMsg, false, {
					force_reply: true
				});
			} else if (message.startsWith(`show_payday_options_`)) {
				showPayDayOptionsMenu(chatId, messageId, callbackUniqueId);
			} else if (message.startsWith(`show_soob_options_`)) {
				showSoobOptionsMenu(chatId, messageId, callbackUniqueId);
			} else if (message.startsWith(`show_mesto_options_`)) {
				showMestoOptionsMenu(chatId, messageId, callbackUniqueId);
			} else if (message.startsWith(`show_radio_options_`)) {
				showRadioOptionsMenu(chatId, messageId, callbackUniqueId);
			} else if (message.startsWith(`show_warning_options_`)) {
				showWarningOptionsMenu(chatId, messageId, callbackUniqueId);
			} else if (message.startsWith(`global_p_on_`)) {
				config.paydayNotifications = true;
				sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_p_off_`)) {
				config.paydayNotifications = false;
				sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_soob_on_`)) {
				config.govMessagesEnabled = true;
				sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_soob_off_`)) {
				config.govMessagesEnabled = false;
				sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_mesto_on_`)) {
				config.trackLocationRequests = true;
				sendToTelegram(`üìç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_mesto_off_`)) {
				config.trackLocationRequests = false;
				sendToTelegram(`üîï <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_radio_on_`)) {
				config.radioOfficialNotifications = true;
				sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –†–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_radio_off_`)) {
				config.radioOfficialNotifications = false;
				sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –†–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_warning_on_`)) {
				config.warningNotifications = true;
				sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–≤–æ—Ä–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_warning_off_`)) {
				config.warningNotifications = false;
				sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–≤–æ—Ä–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith(`global_afk_n_`)) {
				showAFKNightModesMenu(chatId, messageId, callbackUniqueId);
			} else if (message.startsWith(`afk_n_with_pauses_`)) {
				showAFKWithPausesSubMenu(chatId, messageId, callbackUniqueId);
			} else if (message.startsWith(`afk_n_without_pauses_`)) {
				if (config.afkSettings.active) {
					sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				} else {
					const hudId = getPlayerIdFromHUD();
					if (!hudId) {
						sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ HUD`, false, null, config.notificationDeleteDelay);
					} else {
						const idFormats = [hudId];
						if (hudId.includes('-')) {
							idFormats.push(hudId.replace(/-/g, ''));
						} else if (hudId.length === 3) {
							idFormats.push(`${hudId[0]}-${hudId[1]}-${hudId[2]}`);
						}

						config.afkSettings = {
							id: hudId,
							formats: idFormats,
							active: true
						};
						config.afkCycle.mode = 'none';

						sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º (–±–µ–∑ –ø–∞—É–∑) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>\nID –∏–∑ HUD: ${hudId}\n–§–æ—Ä–º–∞—Ç—ã: ${idFormats.join(', ')}`, false, null, config.notificationDeleteDelay);
					}
				}
			} else if (message.startsWith(`afk_n_fixed_`)) {
				if (config.afkSettings.active) {
					sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				} else {
					const hudId = getPlayerIdFromHUD();
					if (!hudId) {
						sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ HUD`, false, null, config.notificationDeleteDelay);
					} else {
						const idFormats = [hudId];
						if (hudId.includes('-')) {
							idFormats.push(hudId.replace(/-/g, ''));
						} else if (hudId.length === 3) {
							idFormats.push(`${hudId[0]}-${hudId[1]}-${hudId[2]}`);
						}

						config.afkSettings = {
							id: hudId,
							formats: idFormats,
							active: true
						};
						config.afkCycle.mode = 'fixed';
						startAFKCycle();

						sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º (—Å –ø–∞—É–∑–∞–º–∏ 5/5) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>\nID –∏–∑ HUD: ${hudId}\n–§–æ—Ä–º–∞—Ç—ã: ${idFormats.join(', ')}\nüîÅ <b>–ó–∞–ø—É—â–µ–Ω AFK —Ü–∏–∫–ª –¥–ª—è PayDay</b>`, false, null, config.notificationDeleteDelay);
					}
				}
			} else if (message.startsWith(`afk_n_random_`)) {
				if (config.afkSettings.active) {
					sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				} else {
					const hudId = getPlayerIdFromHUD();
					if (!hudId) {
						sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ HUD`, false, null, config.notificationDeleteDelay);
					} else {
						const idFormats = [hudId];
						if (hudId.includes('-')) {
							idFormats.push(hudId.replace(/-/g, ''));
						} else if (hudId.length === 3) {
							idFormats.push(`${hudId[0]}-${hudId[1]}-${hudId[2]}`);
						}

						config.afkSettings = {
							id: hudId,
							formats: idFormats,
							active: true
						};
						config.afkCycle.mode = 'random';
						startAFKCycle();

						sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º (—Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${displayName}</b>\nID –∏–∑ HUD: ${hudId}\n–§–æ—Ä–º–∞—Ç—ã: ${idFormats.join(', ')}\nüîÅ <b>–ó–∞–ø—É—â–µ–Ω AFK —Ü–∏–∫–ª –¥–ª—è PayDay</b>`, false, null, config.notificationDeleteDelay);
					}
				}
			} else if (message.startsWith(`global_afk_`)) {
				if (!globalState.awaitingAfkAccount) {
					globalState.awaitingAfkAccount = true;
					const requestMsg = `‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AFK —Ä–µ–∂–∏–º–∞:`;
					sendToTelegram(requestMsg, false, {
						force_reply: true
					});
				}
			} else if (message.startsWith("admin_reply_")) {
				const requestMsg = `‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è ${displayName}:`;
				sendToTelegram(requestMsg, false, {
					force_reply: true
				});
			} else if (message.startsWith("move_forward_")) {
				try {
					window.onScreenControlTouchStart("<Gamepad>/leftStick");
					window.onScreenControlTouchMove("<Gamepad>/leftStick", 0, 1);
					setTimeout(() => {
						window.onScreenControlTouchEnd("<Gamepad>/leftStick");
					}, 500);
					sendToTelegram(`üö∂ <b>–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ –Ω–∞ 0.5 —Å–µ–∫ –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				} catch (err) {
					const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥\n<code>${err.message}</code>`;
					debugLog(errorMsg);
					sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				}
			} else if (message.startsWith("move_back_")) {
				try {
					window.onScreenControlTouchStart("<Gamepad>/leftStick");
					window.onScreenControlTouchMove("<Gamepad>/leftStick", 0, -1);
					setTimeout(() => {
						window.onScreenControlTouchEnd("<Gamepad>/leftStick");
					}, 500);
					sendToTelegram(`üö∂ <b>–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥ –Ω–∞ 0.5 —Å–µ–∫ –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				} catch (err) {
					const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥\n<code>${err.message}</code>`;
					debugLog(errorMsg);
					sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				}
			} else if (message.startsWith("move_left_")) {
				try {
					window.onScreenControlTouchStart("<Gamepad>/leftStick");
					window.onScreenControlTouchMove("<Gamepad>/leftStick", -1, 0);
					setTimeout(() => {
						window.onScreenControlTouchEnd("<Gamepad>/leftStick");
					}, 500);
					sendToTelegram(`üö∂ <b>–î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ –Ω–∞ 0.5 —Å–µ–∫ –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				} catch (err) {
					const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ\n<code>${err.message}</code>`;
					debugLog(errorMsg);
					sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				}
			} else if (message.startsWith("move_right_")) {
				try {
					window.onScreenControlTouchStart("<Gamepad>/leftStick");
					window.onScreenControlTouchMove("<Gamepad>/leftStick", 1, 0);
					setTimeout(() => {
						window.onScreenControlTouchEnd("<Gamepad>/leftStick");
					}, 500);
					sendToTelegram(`üö∂ <b>–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ –Ω–∞ 0.5 —Å–µ–∫ –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				} catch (err) {
					const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ\n<code>${err.message}</code>`;
					debugLog(errorMsg);
					sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				}
			} else if (message.startsWith("move_jump_")) {
				try {
					window.onScreenControlTouchStart("<Keyboard>/leftShift");
					setTimeout(() => {
						window.onScreenControlTouchEnd("<Keyboard>/leftShift");
					}, 500);
					sendToTelegram(`üÜô <b>–ü—Ä—ã–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				} catch (err) {
					const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—ã–∂–æ–∫\n<code>${err.message}</code>`;
					debugLog(errorMsg);
					sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				}
			} else if (message.startsWith("move_sit_")) {
				try {
					window.onScreenControlTouchStart("<Keyboard>/c");
					setTimeout(() => window.onScreenControlTouchEnd("<Keyboard>/c"), 500);
					config.isSitting = true;
					sendToTelegram(`‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ "–°–µ—Å—Ç—å" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${displayName}</b>`, false, null, config.notificationDeleteDelay);
					showMovementControlsMenu(chatId, messageId, false);
				} catch (err) {
					const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É "–°–µ—Å—Ç—å"\n<code>${err.message}</code>`;
					debugLog(errorMsg);
					sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				}
			} else if (message.startsWith("move_stand_")) {
				try {
					window.onScreenControlTouchStart("<Keyboard>/c");
					setTimeout(() => window.onScreenControlTouchEnd("<Keyboard>/c"), 500);
					config.isSitting = false;
					sendToTelegram(`‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ "–í—Å—Ç–∞—Ç—å" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${displayName}</b>`, false, null, config.notificationDeleteDelay);
					showMovementControlsMenu(chatId, messageId, false);
				} catch (err) {
					const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É "–í—Å—Ç–∞—Ç—å"\n<code>${err.message}</code>`;
					debugLog(errorMsg);
					sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				}
			} else if (message.startsWith("show_local_soob_options_")) {
				showLocalSoobOptionsMenu(chatId, messageId);
			} else if (message.startsWith("show_local_mesto_options_")) {
				showLocalMestoOptionsMenu(chatId, messageId);
			} else if (message.startsWith("show_local_radio_options_")) {
				showLocalRadioOptionsMenu(chatId, messageId);
			} else if (message.startsWith("show_local_warning_options_")) {
				showLocalWarningOptionsMenu(chatId, messageId);
			} else if (message.startsWith("local_soob_on_")) {
				config.govMessagesEnabled = true;
				sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith("local_soob_off_")) {
				config.govMessagesEnabled = false;
				sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith("local_mesto_on_")) {
				config.trackLocationRequests = true;
				sendToTelegram(`üìç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith("local_mesto_off_")) {
				config.trackLocationRequests = false;
				sendToTelegram(`üîï <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith("local_radio_on_")) {
				config.radioOfficialNotifications = true;
				sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –†–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith("local_radio_off_")) {
				config.radioOfficialNotifications = false;
				sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –†–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith("local_warning_on_")) {
				config.warningNotifications = true;
				sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–≤–æ—Ä–∞—Ö –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			} else if (message.startsWith("local_warning_off_")) {
				config.warningNotifications = false;
				sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–≤–æ—Ä–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
				sendWelcomeMessage();
			}
		}
	}
}

function registerUser() {
	if (!config.accountInfo.nickname) {
		debugLog('–ù–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞');
		return;
	}
	config.activeUsers[config.accountInfo.nickname] = config.accountInfo.nickname;
	debugLog(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${displayName} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ`);
}

function isNonRPMessage(message) {
	return message.includes('((') && message.includes('))');
}

function checkIDFormats(message) {
	const idRegex = /(\d-\d-\d|\d{3})/g;
	const matches = message.match(idRegex);
	return matches ? matches : [];
}

function checkRoleAndActionConditions(lowerCaseMessage) {
	const hasRoleKeyword = (
		lowerCaseMessage.indexOf("–¥–µ–ø—É—Ç–∞—Ç") !== -1 ||
		lowerCaseMessage.indexOf("–≤–∏—Ü–µ-–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
		lowerCaseMessage.indexOf("–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
		lowerCaseMessage.indexOf("–ª–∏—Ü–µ–Ω–∑—ë—Ä") !== -1
	);

	const hasActionKeyword = (
		lowerCaseMessage.indexOf("–º–µ—Å—Ç–æ") !== -1 ||
		lowerCaseMessage.indexOf("–≤–∞—à–µ") !== -1 ||
		lowerCaseMessage.indexOf("–∂–µ—Ç–æ–Ω") !== -1
	);

	return hasRoleKeyword && hasActionKeyword;
}

function checkAFKConditions(msg, lowerCaseMessage) {
	if (!config.afkSettings.active) return false;

	const hasConditions = checkRoleAndActionConditions(lowerCaseMessage);
	const hasID = config.afkSettings.formats.some(format => msg.includes(format));

	return hasConditions && hasID;
}

function checkLocationRequest(msg, lowerCaseMessage) {
	if (!config.trackLocationRequests && !isTargetingPlayer(msg)) {
		return false;
	}

	const hasRoleKeyword = /(–¥–µ–ø—É—Ç–∞—Ç|–≤–∏—Ü–µ-–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä|–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä|–ª–∏—Ü–µ–Ω–∑—ë—Ä)/i.test(lowerCaseMessage);
	const hasActionKeyword = config.locationKeywords.some(word => lowerCaseMessage.includes(word));
	const hasID = isTargetingPlayer(msg);

	return hasRoleKeyword && (hasActionKeyword || hasID);
}

function isTargetingPlayer(msg) {
	if (!config.lastPlayerId) return false;

	const idFormats = [
		config.lastPlayerId,
		config.lastPlayerId.split('').join('-')
	];

	return idFormats.some(format => msg.includes(format));
}

function processSalaryAndBalance(msg) {
    if (!config.paydayNotifications) {
        debugLog('PayDay –ø—Ä–æ–ø—É—â–µ–Ω: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏)
    if (msg.includes("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∏–≥—Ä–µ –º–∏–Ω–∏–º—É–º 25 –º–∏–Ω—É—Ç")) {
        debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ 25 –º–∏–Ω—É—Ç–∞—Ö`);
        const message = `- PayDay | ${displayName}:\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∏–≥—Ä–µ –º–∏–Ω–∏–º—É–º 25 –º–∏–Ω—É—Ç`;
        sendToTelegram(message);
        config.lastSalaryInfo = null; // –°–±—Ä–æ—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        return;
    }

    if (msg.includes("–í—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–∞—É–∑–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã")) {
        debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–∞—É–∑–µ`);
        const message = `- PayDay | ${displayName}:\n–í—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–∞—É–∑–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã`;
        sendToTelegram(message);
        config.lastSalaryInfo = null; // –°–±—Ä–æ—Å
        return;
    }

    if (msg.includes("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∏–≥—Ä–µ –º–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç")) {
        debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ 10 –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –æ–ø—ã—Ç–∞`);
        const message = `- PayDay | ${displayName}:\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∏–≥—Ä–µ –º–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç`;
        sendToTelegram(message);
        config.lastSalaryInfo = null; // –°–±—Ä–æ—Å
        return;
    }

	const salaryMatch = msg.match(/–ó–∞—Ä–ø–ª–∞—Ç–∞: \{[\w]+\}(\d+) —Ä—É–±/);
	if (salaryMatch) {
		debugLog(`–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–ø–∞—Ä—Å–µ–Ω–∞: ${salaryMatch[1]}`);
		config.lastSalaryInfo = config.lastSalaryInfo || {};
		config.lastSalaryInfo.salary = salaryMatch[1];
		debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: ${salaryMatch[1]} —Ä—É–±`);
	}

	const balanceMatch = msg.match(/–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: \{[\w]+\}(\d+) —Ä—É–±/);
	if (balanceMatch) {
		debugLog(`–ë–∞–ª–∞–Ω—Å —Å–ø–∞—Ä—Å–µ–Ω: ${balanceMatch[1]}`);
		config.lastSalaryInfo = config.lastSalaryInfo || {};
		config.lastSalaryInfo.balance = balanceMatch[1];
		debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: ${balanceMatch[1]} —Ä—É–±`);
	}

	if (config.lastSalaryInfo && config.lastSalaryInfo.salary && config.lastSalaryInfo.balance) {
		const message = `+ PayDay | ${displayName}:\n–ó–∞—Ä–ø–ª–∞—Ç–∞: ${config.lastSalaryInfo.salary} —Ä—É–±\n–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: ${config.lastSalaryInfo.balance} —Ä—É–±`;
		sendToTelegram(message);
		config.lastSalaryInfo = null;
	}
}

function checkGovMessageConditions(msg, senderName, senderId) {
	if (!config.govMessagesEnabled) return false;

	const lowerMsg = msg.toLowerCase();
	const hasKeyword = config.govMessageKeywords.some(keyword =>
		lowerMsg.includes(keyword.toLowerCase())
	);

	const trackerKey = `${senderName}_${senderId}`;
	const now = Date.now();
	let tracker = config.govMessageTrackers[trackerKey];

	if (!tracker) {
		tracker = {
			count: 1,
			lastMessageTime: now,
			cooldownEnd: 0
		};
		config.govMessageTrackers[trackerKey] = tracker;
		return true;
	}

	if (hasKeyword && tracker.cooldownEnd > 0) {
		debugLog(`–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è ${senderName}`);
		tracker.cooldownEnd = 0;
		tracker.count = 1;
		return true;
	}

	if (now < tracker.cooldownEnd) {
		return false;
	}

	if (now - tracker.lastMessageTime > config.govMessageCooldown) {
		tracker.count = 1;
		tracker.lastMessageTime = now;
		return true;
	}

	tracker.count++;
	tracker.lastMessageTime = now;

	if (tracker.count > config.govMessageThreshold) {
		tracker.cooldownEnd = now + config.govMessageCooldown;
		debugLog(`–ë–ª–æ–∫–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç ${senderName} –Ω–∞ 6 –º–∏–Ω—É—Ç`);
		return false;
	}

	return true;
}

function startAFKCycle() {
	config.afkCycle.active = true;
	config.afkCycle.startTime = Date.now();
	config.afkCycle.totalPlayTime = 0;

	debugLog(`AFK —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${displayName}`);
	sendToTelegram(`üîÑ <b>AFK —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${displayName}</b>\n–û–∂–∏–¥–∞–Ω–∏–µ PayDay —Å–æ–æ–±—â–µ–Ω–∏—è "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:"`, false, null, config.notificationDeleteDelay);
}

function stopAFKCycle() {
	if (config.afkCycle.cycleTimer) {
		clearTimeout(config.afkCycle.cycleTimer);
	}
	if (config.afkCycle.playTimer) {
		clearTimeout(config.afkCycle.playTimer);
	}
	if (config.afkCycle.pauseTimer) {
		clearTimeout(config.afkCycle.pauseTimer);
	}
	if (config.afkCycle.mainTimer) {
		clearTimeout(config.afkCycle.mainTimer);
	}

	config.afkCycle.active = false;
	debugLog(`AFK —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${displayName}`);
	sendToTelegram(`‚èπÔ∏è <b>AFK —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
}

function startPlayPhase() {
	if (!config.afkCycle.active) return;

	debugLog(`–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Ñ–∞–∑—É –¥–ª—è ${displayName}`);
	sendToTelegram(`‚ñ∂Ô∏è –ò–≥—Ä–æ–≤–∞—è —Ñ–∞–∑–∞ –Ω–∞—á–∞—Ç–∞ –¥–ª—è ${displayName}`, false, null, config.notificationDeleteDelay);

	try {
		if (typeof closeInterface === 'function') {
			closeInterface("PauseMenu");
			debugLog(`–í—ã—Ö–æ–¥ –∏–∑ –ø–∞—É–∑—ã –¥–ª—è ${displayName}`);
		}
	} catch (e) {
		debugLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–∞—É–∑—ã: ${e.message}`);
	}

	config.afkCycle.currentPlayTime = 0;

	let playDurationMs;
	if (config.afkCycle.mode === 'fixed') {
		playDurationMs = 5 * 60 * 1000;
	} else if (config.afkCycle.mode === 'random') {
		const minMin = 2;
		const maxMin = 8;
		const remainingPlay = 25 * 60 * 1000 - config.afkCycle.totalPlayTime;
		if (remainingPlay <= 0) {
			enterPauseUntilEnd();
			return;
		}
		const maxPossible = Math.min(maxMin * 60 * 1000, remainingPlay);
		const minPossible = Math.min(minMin * 60 * 1000, maxPossible);
		playDurationMs = Math.floor(Math.random() * (maxPossible - minPossible + 1) + minPossible);
	}

	debugLog(`–ò–≥—Ä–æ–≤–∞—è —Ñ–∞–∑–∞: ${playDurationMs / 60000} –º–∏–Ω—É—Ç`);

	config.afkCycle.playTimer = setTimeout(() => {
		config.afkCycle.totalPlayTime += playDurationMs;

		if (config.afkCycle.totalPlayTime < 25 * 60 * 1000) {
			startPausePhase();
		} else {
			debugLog(`–û—Ç—ã–≥—Ä–∞–Ω–æ 25 –º–∏–Ω—É—Ç, —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ PayDay –¥–ª—è ${displayName}`);
			sendToTelegram(`üí§ <b>–û—Ç—ã–≥—Ä–∞–Ω–æ 25 –º–∏–Ω—É—Ç –¥–ª—è ${displayName}</b>\n–°—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ PayDay`, false, null, config.notificationDeleteDelay);
			enterPauseUntilEnd();
		}
	}, playDurationMs);
}

function startPausePhase() {
	if (!config.afkCycle.active) return;

	debugLog(`–ù–∞—á–∏–Ω–∞–µ–º —Ñ–∞–∑—É –ø–∞—É–∑—ã –¥–ª—è ${displayName}`);

	try {
		if (typeof openInterface === 'function') {
			openInterface("PauseMenu");
			debugLog(`–í—Ö–æ–¥ –≤ –ø–∞—É–∑—É –¥–ª—è ${displayName}`);
		}
	} catch (e) {
		debugLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–∞—É–∑—É: ${e.message}`);
	}

	config.afkCycle.currentPauseTime = 0;

	let pauseDurationMs;
	if (config.afkCycle.mode === 'fixed') {
		pauseDurationMs = 5 * 60 * 1000;
	} else if (config.afkCycle.mode === 'random') {
		const minMin = 2;
		const maxMin = 8;
		pauseDurationMs = Math.floor(Math.random() * ((maxMin - minMin) * 60 * 1000 + 1) + minMin * 60 * 1000);
	}

	debugLog(`–ü–∞—É–∑–∞: ${pauseDurationMs / 60000} –º–∏–Ω—É—Ç`);

	config.afkCycle.pauseTimer = setTimeout(() => {
		startPlayPhase();
	}, pauseDurationMs);
}

function enterPauseUntilEnd() {
	try {
		if (typeof openInterface === 'function') {
			openInterface("PauseMenu");
			debugLog(`–í—Ö–æ–¥ –≤ –ø–∞—É–∑—É –¥–æ –∫–æ–Ω—Ü–∞ –¥–ª—è ${displayName}`);
		}
	} catch (e) {
		debugLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø–∞—É–∑—É –¥–æ –∫–æ–Ω—Ü–∞: ${e.message}`);
	}
}

function handlePayDayTimeMessage() {
	if (!config.afkSettings.active || config.afkCycle.mode === 'none') {
		return;
	}

	if (config.afkCycle.cycleTimer) {
		clearTimeout(config.afkCycle.cycleTimer);
	}
	if (config.afkCycle.playTimer) {
		clearTimeout(config.afkCycle.playTimer);
	}
	if (config.afkCycle.pauseTimer) {
		clearTimeout(config.afkCycle.pauseTimer);
	}
	if (config.afkCycle.mainTimer) {
		clearTimeout(config.afkCycle.mainTimer);
	}

	const mainTimerDuration = 59 * 60 * 1000;

	config.afkCycle.mainTimer = setTimeout(() => {
		try {
			if (typeof closeInterface === 'function') {
				closeInterface("PauseMenu");
				debugLog(`–í—ã—Ö–æ–¥ –∏–∑ –ø–∞—É–∑—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º PayDay –¥–ª—è ${displayName}`);
				sendToTelegram(`‚ñ∂Ô∏è <b>–í—ã—Ö–æ–¥ –∏–∑ –ø–∞—É–∑—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º PayDay –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
			}
		} catch (e) {
			debugLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–∞—É–∑—ã: ${e.message}`);
		}

		if (config.afkCycle.playTimer) clearTimeout(config.afkCycle.playTimer);
		if (config.afkCycle.pauseTimer) clearTimeout(config.afkCycle.pauseTimer);

		debugLog(`–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É PayDay –¥–ª—è ${displayName}`);
		sendToTelegram(`‚è∞ <b>–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É PayDay –¥–ª—è ${displayName}</b>\n–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:"`, false, null, config.notificationDeleteDelay);
	}, mainTimerDuration);

	if (!config.afkCycle.active) {
		startAFKCycle();
	}

	config.afkCycle.startTime = Date.now();
	config.afkCycle.totalPlayTime = 0;

	const modeText = config.afkCycle.mode === 'fixed' ? '5 –º–∏–Ω –∏–≥—Ä–∞–µ–º, 5 –º–∏–Ω –ø–∞—É–∑–∞' : '—Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã/–ø–∞—É–∑—ã';
	debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:", –Ω–∞—á–∏–Ω–∞–µ–º AFK —Ü–∏–∫–ª –¥–ª—è ${displayName}`);
	sendToTelegram(`‚è∞ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω PayDay –¥–ª—è ${displayName}</b>\n–ù–∞—á–∏–Ω–∞–µ–º AFK —Ü–∏–∫–ª: ${modeText}\n–ì–ª–∞–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä: 59 –º–∏–Ω—É—Ç`, false, null, config.notificationDeleteDelay);

	startPlayPhase();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
function setupAutoLogin(attempt = 1) {
	if (!autoLoginConfig.enabled) {
		debugLog('–ê–≤—Ç–æ–≤—Ö–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω');
		return;
	}

	if (attempt > autoLoginConfig.maxAttempts) {
		const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–≤—Ö–æ–¥ –ø–æ—Å–ª–µ ${autoLoginConfig.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`;
		debugLog(errorMsg);
		sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
		return;
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Authorization
	if (!window.getInterfaceStatus("Authorization")) {
		debugLog(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Authorization –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${autoLoginConfig.attemptInterval}–º—Å`);
		setTimeout(() => setupAutoLogin(attempt + 1), autoLoginConfig.attemptInterval);
		return;
	}

	// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Authorization
	const authInstance = window.interface("Authorization");
	if (!authInstance) {
		debugLog(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –≠–∫–∑–µ–º–ø–ª—è—Ä Authorization –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${autoLoginConfig.attemptInterval}–º—Å`);
		setTimeout(() => setupAutoLogin(attempt + 1), autoLoginConfig.attemptInterval);
		return;
	}

	// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Login —á–µ—Ä–µ–∑ getInstance("auth")
	const loginInstance = authInstance.getInstance("auth");
	if (!loginInstance) {
		debugLog(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –≠–∫–∑–µ–º–ø–ª—è—Ä Login –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${autoLoginConfig.attemptInterval}–º—Å`);
		setTimeout(() => setupAutoLogin(attempt + 1), autoLoginConfig.attemptInterval);
		return;
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
	debugLog(`[${displayName}] –ê–≤—Ç–æ–≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è: ${autoLoginConfig.password}`);
	loginInstance.password.value = autoLoginConfig.password;

	// –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM –∏ —ç–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"
	setTimeout(() => {
		if (loginInstance.password.value === autoLoginConfig.password) {
			debugLog(`[${displayName}] –≠–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"`);
			try {
				loginInstance.onClickEvent("play");
				sendToTelegram(`‚úÖ <b>–ê–≤—Ç–æ–≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è ${displayName}</b>`, false, null, config.notificationDeleteDelay);
			} catch (err) {
				const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥\n<code>${err.message}</code>`;
				debugLog(errorMsg);
				sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				setTimeout(() => setupAutoLogin(attempt + 1), autoLoginConfig.attemptInterval);
			}
		} else {
			debugLog(`[${displayName}] –û—à–∏–±–∫–∞: –ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${autoLoginConfig.attemptInterval}–º—Å`);
			setTimeout(() => setupAutoLogin(attempt + 1), autoLoginConfig.attemptInterval);
		}
	}, 100);
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–≤—Ö–æ–¥–∞
function initializeAutoLogin() {
	if (!autoLoginConfig.enabled) {
		debugLog('–ê–≤—Ç–æ–≤—Ö–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
		return;
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Authorization
	if (window.getInterfaceStatus("Authorization")) {
		debugLog('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Authorization —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≤—Ö–æ–¥');
		setupAutoLogin();
	} else {
		// –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Authorization —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
		const openParams = [
			"auth", // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
			config.accountInfo.nickname || "Pavel_Nabokov", // –õ–æ–≥–∏–Ω (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)
			"", // –°–µ—Ä–≤–µ—Ä
			"", // –ë–æ–Ω—É—Å—ã
			"", // –•—ç–ª–ª–æ—É–∏–Ω
			"", // –ù–æ–≤—ã–π –≥–æ–¥
			"", // –ü–∞—Å—Ö–∞
			"https://radmir.online/recovery-password", // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
			{ // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
				autoLogin: {
					password: autoLoginConfig.password,
					enabled: autoLoginConfig.enabled
				}
			}
		];
		debugLog(`–û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Authorization –¥–ª—è ${displayName}`);
		try {
			window.openInterface("Authorization", JSON.stringify(openParams));
		} catch (err) {
			debugLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Authorization: ${err.message}`);
			sendToTelegram(`‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Authorization\n<code>${err.message}</code>`, false, null, config.notificationDeleteDelay);
			return;
		}

		// –û–∂–∏–¥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
		let attempts = 0;
		const checkInterval = setInterval(() => {
			attempts++;
			if (window.getInterfaceStatus("Authorization")) {
				clearInterval(checkInterval);
				debugLog('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Authorization –æ—Ç–∫—Ä—ã—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≤—Ö–æ–¥');
				setTimeout(setupAutoLogin, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
			} else if (attempts >= autoLoginConfig.maxAttempts) {
				clearInterval(checkInterval);
				const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Authorization –ø–æ—Å–ª–µ ${autoLoginConfig.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`;
				debugLog(errorMsg);
				sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
			} else {
				debugLog(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è Authorization`);
			}
		}, autoLoginConfig.attemptInterval);
	}
}

// –ü–µ—Ä–µ—Ö–≤–∞—Ç window.openInterface –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
const originalOpenInterface = window.openInterface;
window.openInterface = function(interfaceName, params, additionalParams) {
	const result = originalOpenInterface.call(this, interfaceName, params, additionalParams);

	if (interfaceName === "Authorization") {
		debugLog(`[${displayName}] –û—Ç–∫—Ä—ã—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Authorization, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–≤—Ö–æ–¥–∞`);
		setTimeout(initializeAutoLogin, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	}

	return result;
};

function initializeChatMonitor() {
	if (typeof sendChatInput === 'undefined') {
		const errorMsg = '‚ùå <b>–û—à–∏–±–∫–∞</b>\nsendChatInput –Ω–µ –Ω–∞–π–¥–µ–Ω';
		debugLog(errorMsg);
		sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
		return false;
	}

	if (typeof window.playSound === 'undefined') {
		debugLog('–§—É–Ω–∫—Ü–∏—è playSound –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é');
		window.playSound = function(url, loop, volume) {
			const audio = new Audio(url);
			audio.loop = loop || false;
			audio.volume = volume || 1.0;
			audio.play().catch(e => debugLog('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e));
		};
	}

	window.OnChatAddMessage = function(e, i, t) {
	// –µ—Å–ª–∏ —á—Ç–æ —É–±—Ä–∞—Ç—å
    debugLog(`–ß–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ: ${e} | –¶–≤–µ—Ç: ${i} | –¢–∏–ø: ${t} | –ü–∞—É–∑–∞: ${window.getInterfaceStatus("PauseMenu")}`);
		const msg = String(e);
		const lowerCaseMessage = msg.toLowerCase();
		const currentTime = Date.now();
		const chatRadius = getChatRadius(i);

		// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
		// console.log(msg); // —Å–æ–æ–± –≤ —á–∞—Ç

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:" –¥–ª—è AFK
	    if (msg.includes("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:") && config.afkSettings.active) {
	        handlePayDayTimeMessage();
	    }
	
	    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è AFK –Ω–æ—á—å
	    if (config.afkSettings.active && config.afkCycle.active && msg.includes("–°–µ—Ä–≤–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã...")) {
	        debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞!');
	        sendChatInput("/q");
	        sendToTelegram(`‚ö° <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ /q (${displayName})</b>\n–ü–æ —É—Å–ª–æ–≤–∏—é AFK –Ω–æ—á—å: –°–µ—Ä–≤–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É`, false, null, config.notificationDeleteDelay);
	    }

		if (lowerCaseMessage.includes("–∑–∞—Ä–µ—Å–ø–∞–≤–Ω–∏–ª –≤–∞—Å")) {
			debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Å–ø–∞–≤–Ω –¥–ª—è ${displayName}!`);
			const replyMarkup = {
				inline_keyboard: [
					[
						createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", `admin_reply_${uniqueId}`),
						createButton("üö∂ –î–≤–∏–∂–µ–Ω–∏—è", `show_movement_${uniqueId}`)
					]
				]
			};
			sendToTelegram(`üîÑ <b>–í–∞—Å –∑–∞—Ä–µ—Å–ø–∞–≤–Ω–∏–ª–∏! (${displayName})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`, false, replyMarkup);
			window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/uved.mp3", false, 1.0);
		}

		if (lowerCaseMessage.includes("–≤—ã –±—ã–ª–∏ –∫–∏–∫–Ω—É—Ç—ã –ø–æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—é –≤ —á–∏—Ç–µ—Ä—Å—Ç–≤–µ")) {
			debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∏–∫ –∞–Ω—Ç–∏-—á–∏—Ç–æ–º –¥–ª—è ${displayName}!`);
			const replyMarkup = {
				inline_keyboard: [
					[
						createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", `admin_reply_${uniqueId}`),
						createButton("üö∂ –î–≤–∏–∂–µ–Ω–∏—è", `show_movement_${uniqueId}`)
					]
				]
			};
			sendToTelegram(`üö´ <b>–í–∞—Å –∫–∏–∫–Ω—É–ª –∞–Ω—Ç–∏-—á–∏—Ç! (${displayName})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`, false, replyMarkup);
			window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/kick.mp3", false, 1.0);
		}

		const govMessageRegex = /^- (.+?) \{CCFF00}\(\{v:([^}]+)}\)\[(\d+)\]/;
		const govMatch = msg.match(govMessageRegex);
		if (govMatch) {
			const messageText = govMatch[1];
			const senderName = govMatch[2];
			const senderId = govMatch[3];

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —Ä–∞–¥–∏—É—Å–∞ CLOSE
			if (chatRadius === CHAT_RADIUS.CLOSE) {
				if (checkGovMessageConditions(messageText, senderName, senderId)) {
					const replyMarkup = {
						inline_keyboard: [
							[
								createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", `admin_reply_${uniqueId}`),
								createButton("üö∂ –î–≤–∏–∂–µ–Ω–∏—è", `show_movement_${uniqueId}`)
							]
						]
					};
					sendToTelegram(`üèõÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (${displayName}):</b>\nüë§ ${senderName} [ID: ${senderId}]\nüí¨ ${messageText}`, false, replyMarkup);
				}
			}
		}

		processSalaryAndBalance(msg);

		if (config.keywords.some(kw => lowerCaseMessage.includes(kw.toLowerCase()))) {
			debugLog('–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:', msg);
			sendToTelegram(`üîî <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (${displayName}):</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`);

			setTimeout(() => {
				try {
					sendChatInput("/c");
					debugLog('–ö–æ–º–∞–Ω–¥–∞ /c –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
				} catch (err) {
					const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞ ${displayName}</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /c\n<code>${err.message}</code>`;
					debugLog(errorMsg);
					sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
				}
			}, config.clearDelay);
		}

		if ((lowerCaseMessage.indexOf("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") !== -1 && lowerCaseMessage.indexOf("–¥–ª—è") !== -1) ||
			(msg.includes("[A]") && msg.includes("((")) ||
			(lowerCaseMessage.includes("–ø–æ–¥–±—Ä–æ—Å–∏–ª") &&
				(currentTime - config.lastPodbrosTime > config.podbrosCooldown || config.podbrosCounter < 2))) {

			if (lowerCaseMessage.includes("–ø–æ–¥–±—Ä–æ—Å–∏–ª")) {
				config.podbrosCounter++;
				if (config.podbrosCounter <= 2) {
					debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–±—Ä–æ—Å!');
					const replyMarkup = {
						inline_keyboard: [
							[
								createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", `admin_reply_${uniqueId}`),
								createButton("üö∂ –î–≤–∏–∂–µ–Ω–∏—è", `show_movement_${uniqueId}`)
							]
						]
					};
					sendToTelegram(`üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–±—Ä–æ—Å! (${displayName})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`, false, replyMarkup);
					window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/uved.mp3", false, 1.0);
				}

				if (currentTime - config.lastPodbrosTime > config.podbrosCooldown) {
					config.podbrosCounter = 0;
				}
				config.lastPodbrosTime = currentTime;
			} else {
				debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!');
				const replyMarkup = {
					inline_keyboard: [
						[
							createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", `admin_reply_${uniqueId}`),
							createButton("üö∂ –î–≤–∏–∂–µ–Ω–∏—è", `show_movement_${uniqueId}`)
						]
					]
				};
				sendToTelegram(`üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! (${displayName})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`, false, replyMarkup);
				window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/uved.mp3", false, 1.0);
			}
		}

		if (!isNonRPMessage(msg) && (
				(lowerCaseMessage.indexOf("–¥–µ–ø—É—Ç–∞—Ç") !== -1 ||
					lowerCaseMessage.indexOf("–≤–∏—Ü–µ-–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
					lowerCaseMessage.indexOf("–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
					lowerCaseMessage.indexOf("–ª–∏—Ü–µ–Ω–∑—ë—Ä") !== -1 ||
					lowerCaseMessage.indexOf("–∞–¥–≤–æ–∫–∞—Ç") !== -1) &&
				(lowerCaseMessage.indexOf("—Å—Ç—Ä–æ–π") !== -1 ||
					lowerCaseMessage.indexOf("—Å–±–æ—Ä") !== -1 ||
					lowerCaseMessage.indexOf("–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å") !== -1 ||
					lowerCaseMessage.indexOf("–∫–æ–Ω—Ñ") !== -1)
			) && (chatRadius === CHAT_RADIUS.RADIO)) {
			debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ—Ä/—Å—Ç—Ä–æ–π!');
			sendToTelegram(`üì¢ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ—Ä/—Å—Ç—Ä–æ–π! (${displayName})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`);
			window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/steroi.mp3", false, 1.0);

			setTimeout(() => {
				sendChatInput("/q");
				debugLog('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /q');
				sendToTelegram(`‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ /q (${displayName})</b>`, false, null, config.notificationDeleteDelay);
			}, 30);
		}

		if (lowerCaseMessage.indexOf("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") !== -1 &&
			lowerCaseMessage.indexOf("–∫–∏–∫–Ω—É–ª") !== -1 &&
			msg.includes(config.accountInfo.nickname)) {
			debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∏–∫ ${displayName}!`);
			const replyMarkup = {
				inline_keyboard: [
					[
						createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", `admin_reply_${uniqueId}`),
						createButton("üö∂ –î–≤–∏–∂–µ–Ω–∏—è", `show_movement_${uniqueId}`)
					]
				]
			};
			sendToTelegram(`üí¢ <b>–ö–ò–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê! (${displayName})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`, false, replyMarkup);
			window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/kick.mp3", false, 1.0);
		}

		if (!isNonRPMessage(msg) && checkLocationRequest(msg, lowerCaseMessage)) {
			debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è!');
			const replyMarkup = {
				inline_keyboard: [
					[
						createButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", `admin_reply_${uniqueId}`),
						createButton("üö∂ –î–≤–∏–∂–µ–Ω–∏—è", `show_movement_${uniqueId}`)
					]
				]
			};
			sendToTelegram(`üìç <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (${displayName}):</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`, false, replyMarkup);
		}

		if (!isNonRPMessage(msg) && checkAFKConditions(msg, lowerCaseMessage)) {
			debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ AFK —É—Å–ª–æ–≤–∏–µ!');
			sendChatInput("/q");
			sendToTelegram(`‚ö° <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ /q (${displayName})</b>\n–ü–æ AFK —É—Å–ª–æ–≤–∏—é –¥–ª—è ID: ${config.afkSettings.id}\n<code>${msg.replace(/</g, '&lt;')}</code>`, false, null, config.notificationDeleteDelay);
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Ü–∏–∏
		if (chatRadius === CHAT_RADIUS.RADIO && config.radioOfficialNotifications &&
		    (lowerCaseMessage.includes('–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä') || lowerCaseMessage.includes('–≤–∏—Ü–µ-–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä') ||
		     lowerCaseMessage.includes('–¥–µ–ø—É—Ç–∞—Ç') || lowerCaseMessage.includes('–∞–¥–≤–æ–∫–∞—Ç') || lowerCaseMessage.includes('–ª–∏—Ü–µ–Ω–∑—ë—Ä')) &&
		    !isNonRPMessage(msg)) {  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ non-RP —Å–æ–æ–±—â–µ–Ω–∏—è
		    debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Ü–∏–∏!');
		    sendToTelegram(`üì° <b>–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Ü–∏–∏ (${displayName}):</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`);
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≥–æ–≤–æ—Ä–æ–≤
		const warningMatch = msg.match(/(?:–ì—É–±–µ—Ä–Ω–∞—Ç–æ—Ä|–í–∏—Ü–µ-–ì—É–±–µ—Ä–Ω–∞—Ç–æ—Ä)\s+([^[]+)\[(\d+)\]\s+–≤—ã–¥–∞–ª\s+–í–∞–º\s+–í—ã–≥–æ–≤–æ—Ä\s+(\d+)\s+–∏–∑\s+3\.\s+–ü—Ä–∏—á–∏–Ω–∞:\s+(.*)/i);
		if (warningMatch && config.warningNotifications) {
			debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã–≥–æ–≤–æ—Ä!');
			sendToTelegram(`‚ö†Ô∏è <b>–ü–æ–ª—É—á–µ–Ω –≤—ã–≥–æ–≤–æ—Ä (${displayName}):</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`);
		}
	};

	debugLog('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

	if (!config.initialized) {
		trackNicknameAndServer();
		config.initialized = true;

		if (config.trackPlayerId) {
			debugLog('–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ID –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ HUD...');
			trackPlayerId();
		}
	}

	checkTelegramCommands();
	return true;
}

debugLog('–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω');

if (!initializeChatMonitor()) {
	let attempts = 0;
	const intervalId = setInterval(() => {
		attempts++;

		if (initializeChatMonitor()) {
			clearInterval(intervalId);
		} else if (attempts >= config.maxAttempts) {
			clearInterval(intervalId);
			const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ ${config.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`;
			debugLog(errorMsg);
			sendToTelegram(errorMsg, false, null, config.notificationDeleteDelay);
		} else {
			debugLog(`–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ #${attempts}`);
		}
	}, config.checkInterval);
}
