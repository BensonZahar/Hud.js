// ==UserScript==
// @name         RP-Chat Telegram Monitor (Multi-Chat)
// @namespace    http://tampermonkey.net/
// @version      5.3
// @description  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –¥–≤—É—Ö —á–∞—Ç–æ–≤, –æ—á–∏—Å—Ç–∫–æ–π –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ –±–∞–ª–∞–Ω—Å–∞
// @match        https://–≤–∞—à-—Å–∞–π—Ç-—á–∞—Ç–∞/*
// @grant        none
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
    const userConfig = {
        userNumber: "5", // –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ (–∏–∑–º–µ–Ω—è—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        botToken: '7203337635:AAHgE-jr8nkdFTk2Y-PlH214d4drF-WRLUk',
        chatIds: ['1046461621', '–í–¢–û–†–û–ô_CHAT_ID'],
        keywords: [],
        clearDelay: 3000,
        maxAttempts: 15,
        checkInterval: 1000,
        debug: true,
        podbrosCooldown: 30000,
        afkSettings: {}, // –•—Ä–∞–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AFK –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        lastSalaryInfo: null, // –•—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–µ
        paydayNotifications: true // –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ PayDay
    };

    // –ú–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –Ω–∏–∫–∏
    const accountMapping = {
        "1": "Zahar-Deni",
        "2": "Yarik_Alihan",
        "3": "Fors_Guevara",
        "4": "Andrey_Sudu",
        "5": "Nicolas_Lyashov"
    };

    const config = {
        ...userConfig,
        lastUpdateId: 0,
        activeUsers: {},
        lastPodbrosTime: 0,
        podbrosCounter: 0,
        initialized: false,
        nickname: accountMapping[userConfig.userNumber] || `User_${userConfig.userNumber}`
    };

    function debugLog(message) {
        if (config.debug) {
            console.log(`[DEBUG][${config.nickname}]`, message);
        }
    }

    function sendToTelegram(message, silent = false) {
        config.chatIds.forEach(chatId => {
            const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
            const payload = {
                chat_id: chatId,
                text: message,
                parse_mode: 'HTML',
                disable_notification: silent
            };

            const xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onload = function() {
                if (xhr.status === 200) {
                    debugLog(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —á–∞—Ç ${chatId}`);
                } else {
                    debugLog(`–û—à–∏–±–∫–∞ Telegram API –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, xhr.status, xhr.responseText);
                }
            };
            xhr.onerror = function() {
                debugLog(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç ${chatId}`);
            };
            xhr.send(JSON.stringify(payload));
        });
    }

    function checkTelegramCommands() {
        const url = `https://api.telegram.org/bot${config.botToken}/getUpdates?offset=${config.lastUpdateId + 1}`;

        const xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.onload = function() {
            if (xhr.status === 200) {
                try {
                    const data = JSON.parse(xhr.responseText);
                    if (data.ok && data.result.length > 0) {
                        processUpdates(data.result);
                    }
                } catch (e) {
                    debugLog('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Telegram:', e);
                }
            }
            setTimeout(checkTelegramCommands, 3000);
        };
        xhr.onerror = function(error) {
            debugLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∞–Ω–¥:', error);
            setTimeout(checkTelegramCommands, 3000);
        };
        xhr.send();
    }

    function processUpdates(updates) {
        for (const update of updates) {
            config.lastUpdateId = update.update_id;

            if (update.message && update.message.text) {
                const message = update.message.text.trim();

                if (message.startsWith('/chat ')) {
                    const parts = message.split(' ');
                    if (parts.length >= 3) {
                        const targetNumber = parts[1];
                        const textToSend = parts.slice(2).join(' ').trim();

                        if (targetNumber === config.userNumber) {
                            debugLog(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${config.nickname}: ${textToSend}`);
                            try {
                                sendChatInput(textToSend);
                                sendToTelegram(`‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${config.nickname}:</b>\n<code>${textToSend.replace(/</g, '&lt;')}</code>`);
                            } catch (err) {
                                const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n<code>${err.message}</code>`;
                                debugLog(errorMsg);
                                sendToTelegram(errorMsg);
                            }
                        }
                    }
                } else if (message.startsWith('/afk ')) {
                    const parts = message.split(' ');
                    if (parts.length >= 3) {
                        const targetNumber = parts[1];
                        const id = parts[2];

                        if (targetNumber === config.userNumber) {
                            // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã ID (433 –∏ 4-3-3)
                            const idFormats = [id];
                            if (id.includes('-')) {
                                idFormats.push(id.replace(/-/g, ''));
                            } else if (id.length === 3) {
                                idFormats.push(`${id[0]}-${id[1]}-${id[2]}`);
                            }

                            config.afkSettings = {
                                id: id,
                                formats: idFormats,
                                active: true
                            };

                            sendToTelegram(`üîÑ <b>AFK —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${config.nickname}</b>\nID: ${id}\n–§–æ—Ä–º–∞—Ç—ã: ${idFormats.join(', ')}`);
                        }
                    }
                } else if (message.startsWith('/register ')) {
                    const parts = message.split(' ');
                    if (parts.length >= 3) {
                        const userNumber = parts[1];
                        const nickname = parts.slice(2).join(' ');
                        config.activeUsers[userNumber] = nickname;
                        debugLog(`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userNumber} - ${nickname}`);
                    }
                } else if (message === '/list') {
                    let usersList = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n";
                    for (const num in config.activeUsers) {
                        usersList += `${num}: ${config.activeUsers[num]}\n`;
                    }
                    if (Object.keys(config.activeUsers).length === 0) {
                        usersList += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π";
                    }
                    sendToTelegram(usersList);
                } else if (message === '/p_off') {
                    config.paydayNotifications = false;
                    sendToTelegram(`üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${config.nickname}</b>`);
                } else if (message === '/p_on') {
                    config.paydayNotifications = true;
                    sendToTelegram(`üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PayDay –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è ${config.nickname}</b>`);
                }
            }
        }
    }

    function registerUser() {
        config.activeUsers[config.userNumber] = config.nickname;
        debugLog(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${config.nickname} (${config.userNumber}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ`);
    }

    function isNonRPMessage(message) {
        return message.includes('((') && message.includes('))');
    }

    function checkIDFormats(message) {
        // –ò—â–µ–º ID –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: 123 –∏–ª–∏ 1-2-3
        const idRegex = /(\d-\d-\d|\d{3})/g;
        const matches = message.match(idRegex);
        return matches ? matches : [];
    }

    function checkRoleAndActionConditions(lowerCaseMessage) {
        const hasRoleKeyword = (
            lowerCaseMessage.indexOf("–¥–µ–ø—É—Ç–∞—Ç") !== -1 ||
            lowerCaseMessage.indexOf("–≤–∏—Ü–µ-–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
            lowerCaseMessage.indexOf("–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
            lowerCaseMessage.indexOf("–ª–∏—Ü–µ–Ω–∑—ë—Ä") !== -1
        );

        const hasActionKeyword = (
            lowerCaseMessage.indexOf("–º–µ—Å—Ç–æ") !== -1 ||
            lowerCaseMessage.indexOf("–≤–∞—à–µ") !== -1 ||
            lowerCaseMessage.indexOf("–∂–µ—Ç–æ–Ω") !== -1
        );

        return hasRoleKeyword && hasActionKeyword;
    }

    function checkAFKConditions(msg, lowerCaseMessage) {
        if (!config.afkSettings.active) return false;

        const hasConditions = checkRoleAndActionConditions(lowerCaseMessage);
        const hasID = config.afkSettings.formats.some(format => msg.includes(format));

        return hasConditions && hasID;
    }

    function processSalaryAndBalance(msg) {
        if (!config.paydayNotifications) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
        const salaryMatch = msg.match(/–ó–∞—Ä–ø–ª–∞—Ç–∞: \{[\w]+\}(\d+) —Ä—É–±/);
        if (salaryMatch) {
            config.lastSalaryInfo = config.lastSalaryInfo || {};
            config.lastSalaryInfo.salary = salaryMatch[1];
            debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: ${salaryMatch[1]} —Ä—É–±`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ
        const balanceMatch = msg.match(/–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: \{[\w]+\}(\d+) —Ä—É–±/);
        if (balanceMatch) {
            config.lastSalaryInfo = config.lastSalaryInfo || {};
            config.lastSalaryInfo.balance = balanceMatch[1];
            debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: ${balanceMatch[1]} —Ä—É–±`);
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (config.lastSalaryInfo && config.lastSalaryInfo.salary && config.lastSalaryInfo.balance) {
            const message = `+ PayDay | ${config.nickname}:\n–ó–∞—Ä–ø–ª–∞—Ç–∞: ${config.lastSalaryInfo.salary} —Ä—É–±\n–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: ${config.lastSalaryInfo.balance} —Ä—É–±`;
            sendToTelegram(message);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            config.lastSalaryInfo = null;
        }
    }

    function initializeChatMonitor() {
        if (typeof tt === 'undefined' || typeof tt.methods === 'undefined' || typeof tt.methods.add !== 'function') {
            debugLog('tt.methods.add –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }

        if (typeof sendChatInput === 'undefined') {
            const errorMsg = '‚ùå <b>–û—à–∏–±–∫–∞</b>\nsendChatInput –Ω–µ –Ω–∞–π–¥–µ–Ω';
            debugLog(errorMsg);
            sendToTelegram(errorMsg);
            return false;
        }

        if (typeof window.playSound === 'undefined') {
            debugLog('–§—É–Ω–∫—Ü–∏—è playSound –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é');
            window.playSound = function(url, loop, volume) {
                const audio = new Audio(url);
                audio.loop = loop || false;
                audio.volume = volume || 1.0;
                audio.play().catch(e => debugLog('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e));
            };
        }

        const originalAdd = tt.methods.add;

        tt.methods.add = function(e, i, t) {
            originalAdd.call(this, e, i, t);

            const msg = String(e);
            const lowerCaseMessage = msg.toLowerCase();
            const currentTime = Date.now();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–µ
            processSalaryAndBalance(msg);

            // 1. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if (config.keywords.some(kw => lowerCaseMessage.includes(kw.toLowerCase()))) {
                debugLog('–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:', e);
                sendToTelegram(`üîî <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (${config.nickname}):</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`);

                setTimeout(() => {
                    try {
                        debugLog('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /c');
                        sendChatInput("/c");
                        debugLog('–ö–æ–º–∞–Ω–¥–∞ /c –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                    } catch (err) {
                        const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /c\n<code>${err.message}</code>`;
                        debugLog(errorMsg);
                        sendToTelegram(errorMsg);
                    }
                }, config.clearDelay);
            }

            // 2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –ø–æ–¥–±—Ä–æ—Å—ã
            if ((lowerCaseMessage.indexOf("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") !== -1 && lowerCaseMessage.indexOf("–¥–ª—è") !== -1) ||
                (msg.includes("[A]") && msg.includes("((")) ||
                (lowerCaseMessage.includes("–ø–æ–¥–±—Ä–æ—Å–∏–ª") &&
                    (currentTime - config.lastPodbrosTime > config.podbrosCooldown || config.podbrosCounter < 2))) {

                if (lowerCaseMessage.includes("–ø–æ–¥–±—Ä–æ—Å–∏–ª")) {
                    config.podbrosCounter++;
                    if (config.podbrosCounter <= 2) {
                        debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–±—Ä–æ—Å!');
                        sendToTelegram(`üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–±—Ä–æ—Å! (${config.nickname})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`);
                        window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/uved.mp3", false, 1.0);
                    }

                    if (currentTime - config.lastPodbrosTime > config.podbrosCooldown) {
                        config.podbrosCounter = 0;
                    }
                    config.lastPodbrosTime = currentTime;
                } else {
                    debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!');
                    sendToTelegram(`üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! (${config.nickname})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`);
                    window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/uved.mp3", false, 1.0);
                }
            }

            // 3. –°–±–æ—Ä/—Å—Ç—Ä–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è RP —Å–æ–æ–±—â–µ–Ω–∏–π)
            if (!isNonRPMessage(msg) && (
                    (lowerCaseMessage.indexOf("–¥–µ–ø—É—Ç–∞—Ç") !== -1 ||
                        lowerCaseMessage.indexOf("–≤–∏—Ü–µ-–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
                        lowerCaseMessage.indexOf("–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä") !== -1 ||
                        lowerCaseMessage.indexOf("–ª–∏—Ü–µ–Ω–∑—ë—Ä") !== -1) &&
                    (lowerCaseMessage.indexOf("—Å—Ç—Ä–æ–π") !== -1 ||
                        lowerCaseMessage.indexOf("—Å–±–æ—Ä") !== -1 ||
                        lowerCaseMessage.indexOf("–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å") !== -1 ||
                        lowerCaseMessage.indexOf("–∫–æ–Ω—Ñ") !== -1)
                )) {
                debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ—Ä/—Å—Ç—Ä–æ–π!');
                sendToTelegram(`üì¢ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ—Ä/—Å—Ç—Ä–æ–π! (${config.nickname})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`);
                window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/steroi.mp3", false, 1.0);

                setTimeout(() => {
                    sendChatInput("/q");
                    debugLog('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /q');
                    sendToTelegram(`‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ /q (${config.nickname})</b>`);
                }, 30);
            }

            // 4. –ö–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if (
                lowerCaseMessage.indexOf("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") !== -1 &&
                lowerCaseMessage.indexOf("–∫–∏–∫–Ω—É–ª") !== -1 &&
                msg.includes(config.nickname)
            ) {
                debugLog(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∏–∫ ${config.nickname}!`);
                sendToTelegram(`üí¢ <b>–ö–ò–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê! (${config.nickname})</b>\n<code>${msg.replace(/</g, '&lt;')}</code>`);
                window.playSound("https://raw.githubusercontent.com/ZaharQqqq/Sound/main/kick.mp3", false, 1.0);
            }

            // 5. –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ + –¥–µ–π—Å—Ç–≤–∏—è + –ª—é–±–æ–≥–æ ID
            if (!isNonRPMessage(msg) && checkRoleAndActionConditions(lowerCaseMessage)) {
                const foundIDs = checkIDFormats(msg);
                if (foundIDs.length > 0) {
                    debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ —Ä–æ–ª–∏+–¥–µ–π—Å—Ç–≤–∏—è+ID!');
                    sendToTelegram(`üîç <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ (${config.nickname}):</b>\n–†–æ–ª—å + –¥–µ–π—Å—Ç–≤–∏–µ + ID: ${foundIDs.join(', ')}\n<code>${msg.replace(/</g, '&lt;')}</code>`);
                }
            }

            // 6. AFK —Ä–µ–∞–∫—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
            if (!isNonRPMessage(msg) && checkAFKConditions(msg, lowerCaseMessage)) {
                debugLog('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ AFK —É—Å–ª–æ–≤–∏–µ!');
                sendChatInput("/q");
                sendToTelegram(`‚ö° <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ /q (${config.nickname})</b>\n–ü–æ AFK —É—Å–ª–æ–≤–∏—é –¥–ª—è ID: ${config.afkSettings.id}\n<code>${msg.replace(/</g, '&lt;')}</code>`);
            }
        };

        debugLog('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

        if (!config.initialized) {
            sendToTelegram(`üü¢ <b>RP-Chat Monitor</b>\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${config.nickname} (‚Ññ${config.userNumber})\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è PayDay: ${config.paydayNotifications ? '–í–ö–õ' : '–í–´–ö–õ'}`);
            registerUser();
            config.initialized = true;
        }

        checkTelegramCommands();
        return true;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    debugLog('–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω');

    if (!initializeChatMonitor()) {
        let attempts = 0;
        const intervalId = setInterval(() => {
            attempts++;

            if (initializeChatMonitor()) {
                clearInterval(intervalId);
            } else if (attempts >= config.maxAttempts) {
                clearInterval(intervalId);
                const errorMsg = `‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ ${config.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`;
                debugLog(errorMsg);
                sendToTelegram(errorMsg);
            } else {
                debugLog(`–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ #${attempts}`);
            }
        }, config.checkInterval);
    }
})();
 
 